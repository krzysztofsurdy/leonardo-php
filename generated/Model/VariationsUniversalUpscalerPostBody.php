<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace CedricZiel\LeonardoAI\Generated\Model;

class VariationsUniversalUpscalerPostBody extends \ArrayObject
{
    /**
     * @var array
     */
    protected $initialized = [];

    public function isInitialized($property): bool
    {
        return array_key_exists($property, $this->initialized);
    }
    /**
     * The ID of the init image uploaded.
     *
     * @var string|null
     */
    protected $initImageId;
    /**
     * The ID of the generated image.
     *
     * @var string|null
     */
    protected $generatedImageId;
    /**
     * The ID of the variation image.
     *
     * @var string|null
     */
    protected $variationId;
    /**
     * The style to upscale images using universal upscaler with.
     *
     * @var string|null
     */
    protected $upscalerStyle = 'GENERAL';
    /**
     * The creativity strength of the universal upscaler, must be integer between 1 and 10.
     *
     * @var int|null
     */
    protected $creativityStrength = 5;
    /**
     * The upscale multiplier of the universal upscaler, must be number between 1.00 and 2.00.
     *
     * @var float|null
     */
    protected $upscaleMultiplier = 1.5;
    /**
     * The prompt for the universal upscaler.
     *
     * @var string|null
     */
    protected $prompt;

    /**
     * The ID of the init image uploaded.
     */
    public function getInitImageId(): ?string
    {
        return $this->initImageId;
    }

    /**
     * The ID of the init image uploaded.
     */
    public function setInitImageId(?string $initImageId): self
    {
        $this->initialized['initImageId'] = true;
        $this->initImageId = $initImageId;

        return $this;
    }

    /**
     * The ID of the generated image.
     */
    public function getGeneratedImageId(): ?string
    {
        return $this->generatedImageId;
    }

    /**
     * The ID of the generated image.
     */
    public function setGeneratedImageId(?string $generatedImageId): self
    {
        $this->initialized['generatedImageId'] = true;
        $this->generatedImageId = $generatedImageId;

        return $this;
    }

    /**
     * The ID of the variation image.
     */
    public function getVariationId(): ?string
    {
        return $this->variationId;
    }

    /**
     * The ID of the variation image.
     */
    public function setVariationId(?string $variationId): self
    {
        $this->initialized['variationId'] = true;
        $this->variationId = $variationId;

        return $this;
    }

    /**
     * The style to upscale images using universal upscaler with.
     */
    public function getUpscalerStyle(): ?string
    {
        return $this->upscalerStyle;
    }

    /**
     * The style to upscale images using universal upscaler with.
     */
    public function setUpscalerStyle(?string $upscalerStyle): self
    {
        $this->initialized['upscalerStyle'] = true;
        $this->upscalerStyle = $upscalerStyle;

        return $this;
    }

    /**
     * The creativity strength of the universal upscaler, must be integer between 1 and 10.
     */
    public function getCreativityStrength(): ?int
    {
        return $this->creativityStrength;
    }

    /**
     * The creativity strength of the universal upscaler, must be integer between 1 and 10.
     */
    public function setCreativityStrength(?int $creativityStrength): self
    {
        $this->initialized['creativityStrength'] = true;
        $this->creativityStrength = $creativityStrength;

        return $this;
    }

    /**
     * The upscale multiplier of the universal upscaler, must be number between 1.00 and 2.00.
     */
    public function getUpscaleMultiplier(): ?float
    {
        return $this->upscaleMultiplier;
    }

    /**
     * The upscale multiplier of the universal upscaler, must be number between 1.00 and 2.00.
     */
    public function setUpscaleMultiplier(?float $upscaleMultiplier): self
    {
        $this->initialized['upscaleMultiplier'] = true;
        $this->upscaleMultiplier = $upscaleMultiplier;

        return $this;
    }

    /**
     * The prompt for the universal upscaler.
     */
    public function getPrompt(): ?string
    {
        return $this->prompt;
    }

    /**
     * The prompt for the universal upscaler.
     */
    public function setPrompt(?string $prompt): self
    {
        $this->initialized['prompt'] = true;
        $this->prompt = $prompt;

        return $this;
    }
}
