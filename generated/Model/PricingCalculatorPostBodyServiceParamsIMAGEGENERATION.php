<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace CedricZiel\LeonardoAI\Generated\Model;

class PricingCalculatorPostBodyServiceParamsIMAGEGENERATION extends \ArrayObject
{
    /**
     * @var array
     */
    protected $initialized = [];

    public function isInitialized($property): bool
    {
        return array_key_exists($property, $this->initialized);
    }
    /**
     * The input height of the images. Must be between 32 and 1024 and be a multiple of 8. Note: Input resolution is not always the same as output resolution due to upscaling from other features.
     *
     * @var int
     */
    protected $imageHeight;
    /**
     * The input height of the images. Must be between 32 and 1024 and be a multiple of 8. Note: Input resolution is not always the same as output resolution due to upscaling from other features.
     *
     * @var int
     */
    protected $imageWidth;
    /**
     * The number of images to generate. Must be between 1 and 8. If either width or height is over 768, must be between 1 and 4.
     *
     * @var int
     */
    protected $numImages;
    /**
     * The Step Count to use for the generation. Must be between 10 and 60.
     *
     * @var int
     */
    protected $inferenceSteps;
    /**
     * Enable to use Prompt Magic.
     *
     * @var bool|null
     */
    protected $promptMagic;
    /**
     * Strength of prompt magic. Must be a float between 0.1 and 1.0.
     *
     * @var float|null
     */
    protected $promptMagicStrength;
    /**
     * Prompt magic version v2 or v3, for use when promptMagic: true.
     *
     * @var string|null
     */
    protected $promptMagicVersion;
    /**
     * Enable to use Alchemy.
     *
     * @var bool
     */
    protected $alchemyMode;
    /**
     * Enable to use high resolution.
     *
     * @var bool
     */
    protected $highResolution;
    /**
     * The number of elements used for the generation.
     *
     * @var int|null
     */
    protected $loraCount;
    /**
     * Enable to use custom model.
     *
     * @var bool|null
     */
    protected $isModelCustom;
    /**
     * The total cost of controlnets input.
     *
     * @var int|null
     */
    protected $controlnetsCost;
    /**
     * Enable to use SDXL model.
     *
     * @var bool|null
     */
    protected $isSDXL;
    /**
     * Enable to use SDXL Lightning model.
     *
     * @var bool|null
     */
    protected $isSDXLLightning;

    /**
     * The input height of the images. Must be between 32 and 1024 and be a multiple of 8. Note: Input resolution is not always the same as output resolution due to upscaling from other features.
     */
    public function getImageHeight(): int
    {
        return $this->imageHeight;
    }

    /**
     * The input height of the images. Must be between 32 and 1024 and be a multiple of 8. Note: Input resolution is not always the same as output resolution due to upscaling from other features.
     */
    public function setImageHeight(int $imageHeight): self
    {
        $this->initialized['imageHeight'] = true;
        $this->imageHeight = $imageHeight;

        return $this;
    }

    /**
     * The input height of the images. Must be between 32 and 1024 and be a multiple of 8. Note: Input resolution is not always the same as output resolution due to upscaling from other features.
     */
    public function getImageWidth(): int
    {
        return $this->imageWidth;
    }

    /**
     * The input height of the images. Must be between 32 and 1024 and be a multiple of 8. Note: Input resolution is not always the same as output resolution due to upscaling from other features.
     */
    public function setImageWidth(int $imageWidth): self
    {
        $this->initialized['imageWidth'] = true;
        $this->imageWidth = $imageWidth;

        return $this;
    }

    /**
     * The number of images to generate. Must be between 1 and 8. If either width or height is over 768, must be between 1 and 4.
     */
    public function getNumImages(): int
    {
        return $this->numImages;
    }

    /**
     * The number of images to generate. Must be between 1 and 8. If either width or height is over 768, must be between 1 and 4.
     */
    public function setNumImages(int $numImages): self
    {
        $this->initialized['numImages'] = true;
        $this->numImages = $numImages;

        return $this;
    }

    /**
     * The Step Count to use for the generation. Must be between 10 and 60.
     */
    public function getInferenceSteps(): int
    {
        return $this->inferenceSteps;
    }

    /**
     * The Step Count to use for the generation. Must be between 10 and 60.
     */
    public function setInferenceSteps(int $inferenceSteps): self
    {
        $this->initialized['inferenceSteps'] = true;
        $this->inferenceSteps = $inferenceSteps;

        return $this;
    }

    /**
     * Enable to use Prompt Magic.
     */
    public function getPromptMagic(): ?bool
    {
        return $this->promptMagic;
    }

    /**
     * Enable to use Prompt Magic.
     */
    public function setPromptMagic(?bool $promptMagic): self
    {
        $this->initialized['promptMagic'] = true;
        $this->promptMagic = $promptMagic;

        return $this;
    }

    /**
     * Strength of prompt magic. Must be a float between 0.1 and 1.0.
     */
    public function getPromptMagicStrength(): ?float
    {
        return $this->promptMagicStrength;
    }

    /**
     * Strength of prompt magic. Must be a float between 0.1 and 1.0.
     */
    public function setPromptMagicStrength(?float $promptMagicStrength): self
    {
        $this->initialized['promptMagicStrength'] = true;
        $this->promptMagicStrength = $promptMagicStrength;

        return $this;
    }

    /**
     * Prompt magic version v2 or v3, for use when promptMagic: true.
     */
    public function getPromptMagicVersion(): ?string
    {
        return $this->promptMagicVersion;
    }

    /**
     * Prompt magic version v2 or v3, for use when promptMagic: true.
     */
    public function setPromptMagicVersion(?string $promptMagicVersion): self
    {
        $this->initialized['promptMagicVersion'] = true;
        $this->promptMagicVersion = $promptMagicVersion;

        return $this;
    }

    /**
     * Enable to use Alchemy.
     */
    public function getAlchemyMode(): bool
    {
        return $this->alchemyMode;
    }

    /**
     * Enable to use Alchemy.
     */
    public function setAlchemyMode(bool $alchemyMode): self
    {
        $this->initialized['alchemyMode'] = true;
        $this->alchemyMode = $alchemyMode;

        return $this;
    }

    /**
     * Enable to use high resolution.
     */
    public function getHighResolution(): bool
    {
        return $this->highResolution;
    }

    /**
     * Enable to use high resolution.
     */
    public function setHighResolution(bool $highResolution): self
    {
        $this->initialized['highResolution'] = true;
        $this->highResolution = $highResolution;

        return $this;
    }

    /**
     * The number of elements used for the generation.
     */
    public function getLoraCount(): ?int
    {
        return $this->loraCount;
    }

    /**
     * The number of elements used for the generation.
     */
    public function setLoraCount(?int $loraCount): self
    {
        $this->initialized['loraCount'] = true;
        $this->loraCount = $loraCount;

        return $this;
    }

    /**
     * Enable to use custom model.
     */
    public function getIsModelCustom(): ?bool
    {
        return $this->isModelCustom;
    }

    /**
     * Enable to use custom model.
     */
    public function setIsModelCustom(?bool $isModelCustom): self
    {
        $this->initialized['isModelCustom'] = true;
        $this->isModelCustom = $isModelCustom;

        return $this;
    }

    /**
     * The total cost of controlnets input.
     */
    public function getControlnetsCost(): ?int
    {
        return $this->controlnetsCost;
    }

    /**
     * The total cost of controlnets input.
     */
    public function setControlnetsCost(?int $controlnetsCost): self
    {
        $this->initialized['controlnetsCost'] = true;
        $this->controlnetsCost = $controlnetsCost;

        return $this;
    }

    /**
     * Enable to use SDXL model.
     */
    public function getIsSDXL(): ?bool
    {
        return $this->isSDXL;
    }

    /**
     * Enable to use SDXL model.
     */
    public function setIsSDXL(?bool $isSDXL): self
    {
        $this->initialized['isSDXL'] = true;
        $this->isSDXL = $isSDXL;

        return $this;
    }

    /**
     * Enable to use SDXL Lightning model.
     */
    public function getIsSDXLLightning(): ?bool
    {
        return $this->isSDXLLightning;
    }

    /**
     * Enable to use SDXL Lightning model.
     */
    public function setIsSDXLLightning(?bool $isSDXLLightning): self
    {
        $this->initialized['isSDXLLightning'] = true;
        $this->isSDXLLightning = $isSDXLLightning;

        return $this;
    }
}
