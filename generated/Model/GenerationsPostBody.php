<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace CedricZiel\LeonardoAI\Generated\Model;

class GenerationsPostBody extends \ArrayObject
{
    /**
     * @var array
     */
    protected $initialized = [];

    public function isInitialized($property): bool
    {
        return array_key_exists($property, $this->initialized);
    }
    /**
     * Enable to use Alchemy. Note: The appropriate Alchemy version is selected for the specified model. For example, XL models will use Alchemy V2.
     *
     * @var bool|null
     */
    protected $alchemy = true;
    /**
     * Contrast Ratio to use with Alchemy. Must be a float between 0 and 1 inclusive.
     *
     * @var float|null
     */
    protected $contrastRatio;
    /**
     * @var list<ControlnetInput>|null
     */
    protected $controlnets;
    /**
     * @var list<ElementInput>|null
     */
    protected $elements;
    /**
     * Enable to use the Expanded Domain feature of Alchemy.
     *
     * @var bool|null
     */
    protected $expandedDomain;
    /**
     * Enable to use the Fantasy Avatar feature.
     *
     * @var bool|null
     */
    protected $fantasyAvatar;
    /**
     * How strongly the generation should reflect the prompt. 7 is recommended. Must be between 1 and 20.
     *
     * @var int|null
     */
    protected $guidanceScale;
    /**
     * The input height of the images. Must be between 32 and 1024 and be a multiple of 8. Note: Input resolution is not always the same as output resolution due to upscaling from other features.
     *
     * @var int|null
     */
    protected $height = 768;
    /**
     * Enable to use the High Contrast feature of Prompt Magic. Note: Controls RAW mode. Set to false to enable RAW mode.
     *
     * @var bool|null
     */
    protected $highContrast;
    /**
     * Enable to use the High Resolution feature of Prompt Magic.
     *
     * @var bool|null
     */
    protected $highResolution;
    /**
     * @var list<string>|null
     */
    protected $imagePrompts;
    /**
     * @var float|null
     */
    protected $imagePromptWeight;
    /**
     * The ID of an existing image to use in image2image.
     *
     * @var string|null
     */
    protected $initGenerationImageId;
    /**
     * The ID of an Init Image to use in image2image.
     *
     * @var string|null
     */
    protected $initImageId;
    /**
     * How strongly the generated images should reflect the original image in image2image. Must be a float between 0.1 and 0.9.
     *
     * @var float|null
     */
    protected $initStrength;
    /**
     * The model ID used for image generation. If not provided, uses sd_version to determine the version of Stable Diffusion to use. In-app, model IDs are under the Finetune Models menu. Click on the platform model or your custom model, then click View More. For platform models, you can also use the List Platform Models API.
     *
     * @var string|null
     */
    protected $modelId = 'b24e16ff-06e3-43eb-8d33-4416c2d75876';
    /**
     * The negative prompt used for the image generation.
     *
     * @var string|null
     */
    protected $negativePrompt;
    /**
     * The number of images to generate. Must be between 1 and 8. If either width or height is over 768, must be between 1 and 4.
     *
     * @var int|null
     */
    protected $numImages = 4;
    /**
     * The Step Count to use for the generation. Must be between 10 and 60. Default is 15.
     *
     * @var int|null
     */
    protected $numInferenceSteps;
    /**
     * Enable the photoReal feature. Requires enabling alchemy and unspecifying modelId (for photoRealVersion V1).
     *
     * @var bool|null
     */
    protected $photoReal;
    /**
     * The version of photoReal to use. Must be v1 or v2.
     *
     * @var string|null
     */
    protected $photoRealVersion;
    /**
     * Depth of field of photoReal. Must be 0.55 for low, 0.5 for medium, or 0.45 for high. Defaults to 0.55 if not specified.
     *
     * @var float|null
     */
    protected $photoRealStrength;
    /**
     * The style to generate images with. When photoReal is enabled, refer to the Guide section for a full list. When alchemy is disabled, use LEONARDO or NONE. When alchemy is enabled, use ANIME, CREATIVE, DYNAMIC, ENVIRONMENT, GENERAL, ILLUSTRATION, PHOTOGRAPHY, RAYTRACED, RENDER_3D, SKETCH_BW, SKETCH_COLOR, or NONE.
     *
     * @var string|null
     */
    protected $presetStyle = 'DYNAMIC';
    /**
     * The prompt used to generate images.
     *
     * @var string
     */
    protected $prompt = 'A majestic cat in the snow';
    /**
     * Enable to use Prompt Magic.
     *
     * @var bool|null
     */
    protected $promptMagic;
    /**
     * Strength of prompt magic. Must be a float between 0.1 and 1.0.
     *
     * @var float|null
     */
    protected $promptMagicStrength;
    /**
     * Prompt magic version v2 or v3, for use when promptMagic: true.
     *
     * @var string|null
     */
    protected $promptMagicVersion;
    /**
     * Whether the generated images should show in the community feed.
     *
     * @var bool|null
     */
    protected $public;
    /**
     * The scheduler to generate images with. Defaults to EULER_DISCRETE if not specified.
     *
     * @var string
     */
    protected $scheduler;
    /**
     * The base version of stable diffusion to use if not using a custom model. v1_5 is 1.5, v2 is 2.1, if not specified it will default to v1_5. Also includes SDXL and SDXL Lightning models.
     *
     * @var string
     */
    protected $sdVersion;
    /**
     * @var int|null
     */
    protected $seed;
    /**
     * Whether the generated images should tile on all axis.
     *
     * @var bool|null
     */
    protected $tiling;
    /**
     * Which type of transparency this image should use.
     *
     * @var string|null
     */
    protected $transparency;
    /**
     * Whether the generated images should be unzoomed (requires unzoomAmount and init_image_id to be set).
     *
     * @var bool|null
     */
    protected $unzoom;
    /**
     * How much the image should be unzoomed (requires an init_image_id and unzoom to be set to true).
     *
     * @var float|null
     */
    protected $unzoomAmount;
    /**
     * How much the image should be upscaled. (Enterprise Only).
     *
     * @var float|null
     */
    protected $upscaleRatio;
    /**
     * The input width of the images. Must be between 32 and 1024 and be a multiple of 8. Note: Input resolution is not always the same as output resolution due to upscaling from other features.
     *
     * @var int|null
     */
    protected $width = 1024;
    /**
     * This parameter will be deprecated in September 2024. Please use the controlnets array instead.
     *
     * @deprecated
     *
     * @var bool|null
     */
    protected $controlNet;
    /**
     * This parameter will be deprecated in September 2024. Please use the controlnets array instead.
     *
     * @deprecated
     *
     * @var string
     */
    protected $controlNetType;
    /**
     * This parameter will be deprecated in September 2024. Please use the controlnets array instead.
     *
     * @deprecated
     *
     * @var float|null
     */
    protected $weighting;
    /**
     * Whether the generation is for the Canvas Editor feature.
     *
     * @var bool|null
     */
    protected $canvasRequest;
    /**
     * The type of request for the Canvas Editor.
     *
     * @var string|null
     */
    protected $canvasRequestType;
    /**
     * The ID of an initial image to use in Canvas Editor request.
     *
     * @var string|null
     */
    protected $canvasInitId;
    /**
     * The ID of a mask image to use in Canvas Editor request.
     *
     * @var string|null
     */
    protected $canvasMaskId;
    /**
     * When enabled, your prompt is expanded to include more detail.
     *
     * @var bool|null
     */
    protected $enhancePrompt;
    /**
     * When enhancePrompt is enabled, the prompt is enhanced based on the given instructions.
     *
     * @var string|null
     */
    protected $enhancePromptInstruction;

    /**
     * Enable to use Alchemy. Note: The appropriate Alchemy version is selected for the specified model. For example, XL models will use Alchemy V2.
     */
    public function getAlchemy(): ?bool
    {
        return $this->alchemy;
    }

    /**
     * Enable to use Alchemy. Note: The appropriate Alchemy version is selected for the specified model. For example, XL models will use Alchemy V2.
     */
    public function setAlchemy(?bool $alchemy): self
    {
        $this->initialized['alchemy'] = true;
        $this->alchemy = $alchemy;

        return $this;
    }

    /**
     * Contrast Ratio to use with Alchemy. Must be a float between 0 and 1 inclusive.
     */
    public function getContrastRatio(): ?float
    {
        return $this->contrastRatio;
    }

    /**
     * Contrast Ratio to use with Alchemy. Must be a float between 0 and 1 inclusive.
     */
    public function setContrastRatio(?float $contrastRatio): self
    {
        $this->initialized['contrastRatio'] = true;
        $this->contrastRatio = $contrastRatio;

        return $this;
    }

    /**
     * @return list<ControlnetInput>|null
     */
    public function getControlnets(): ?array
    {
        return $this->controlnets;
    }

    /**
     * @param list<ControlnetInput>|null $controlnets
     */
    public function setControlnets(?array $controlnets): self
    {
        $this->initialized['controlnets'] = true;
        $this->controlnets = $controlnets;

        return $this;
    }

    /**
     * @return list<ElementInput>|null
     */
    public function getElements(): ?array
    {
        return $this->elements;
    }

    /**
     * @param list<ElementInput>|null $elements
     */
    public function setElements(?array $elements): self
    {
        $this->initialized['elements'] = true;
        $this->elements = $elements;

        return $this;
    }

    /**
     * Enable to use the Expanded Domain feature of Alchemy.
     */
    public function getExpandedDomain(): ?bool
    {
        return $this->expandedDomain;
    }

    /**
     * Enable to use the Expanded Domain feature of Alchemy.
     */
    public function setExpandedDomain(?bool $expandedDomain): self
    {
        $this->initialized['expandedDomain'] = true;
        $this->expandedDomain = $expandedDomain;

        return $this;
    }

    /**
     * Enable to use the Fantasy Avatar feature.
     */
    public function getFantasyAvatar(): ?bool
    {
        return $this->fantasyAvatar;
    }

    /**
     * Enable to use the Fantasy Avatar feature.
     */
    public function setFantasyAvatar(?bool $fantasyAvatar): self
    {
        $this->initialized['fantasyAvatar'] = true;
        $this->fantasyAvatar = $fantasyAvatar;

        return $this;
    }

    /**
     * How strongly the generation should reflect the prompt. 7 is recommended. Must be between 1 and 20.
     */
    public function getGuidanceScale(): ?int
    {
        return $this->guidanceScale;
    }

    /**
     * How strongly the generation should reflect the prompt. 7 is recommended. Must be between 1 and 20.
     */
    public function setGuidanceScale(?int $guidanceScale): self
    {
        $this->initialized['guidanceScale'] = true;
        $this->guidanceScale = $guidanceScale;

        return $this;
    }

    /**
     * The input height of the images. Must be between 32 and 1024 and be a multiple of 8. Note: Input resolution is not always the same as output resolution due to upscaling from other features.
     */
    public function getHeight(): ?int
    {
        return $this->height;
    }

    /**
     * The input height of the images. Must be between 32 and 1024 and be a multiple of 8. Note: Input resolution is not always the same as output resolution due to upscaling from other features.
     */
    public function setHeight(?int $height): self
    {
        $this->initialized['height'] = true;
        $this->height = $height;

        return $this;
    }

    /**
     * Enable to use the High Contrast feature of Prompt Magic. Note: Controls RAW mode. Set to false to enable RAW mode.
     */
    public function getHighContrast(): ?bool
    {
        return $this->highContrast;
    }

    /**
     * Enable to use the High Contrast feature of Prompt Magic. Note: Controls RAW mode. Set to false to enable RAW mode.
     */
    public function setHighContrast(?bool $highContrast): self
    {
        $this->initialized['highContrast'] = true;
        $this->highContrast = $highContrast;

        return $this;
    }

    /**
     * Enable to use the High Resolution feature of Prompt Magic.
     */
    public function getHighResolution(): ?bool
    {
        return $this->highResolution;
    }

    /**
     * Enable to use the High Resolution feature of Prompt Magic.
     */
    public function setHighResolution(?bool $highResolution): self
    {
        $this->initialized['highResolution'] = true;
        $this->highResolution = $highResolution;

        return $this;
    }

    /**
     * @return list<string>|null
     */
    public function getImagePrompts(): ?array
    {
        return $this->imagePrompts;
    }

    /**
     * @param list<string>|null $imagePrompts
     */
    public function setImagePrompts(?array $imagePrompts): self
    {
        $this->initialized['imagePrompts'] = true;
        $this->imagePrompts = $imagePrompts;

        return $this;
    }

    public function getImagePromptWeight(): ?float
    {
        return $this->imagePromptWeight;
    }

    public function setImagePromptWeight(?float $imagePromptWeight): self
    {
        $this->initialized['imagePromptWeight'] = true;
        $this->imagePromptWeight = $imagePromptWeight;

        return $this;
    }

    /**
     * The ID of an existing image to use in image2image.
     */
    public function getInitGenerationImageId(): ?string
    {
        return $this->initGenerationImageId;
    }

    /**
     * The ID of an existing image to use in image2image.
     */
    public function setInitGenerationImageId(?string $initGenerationImageId): self
    {
        $this->initialized['initGenerationImageId'] = true;
        $this->initGenerationImageId = $initGenerationImageId;

        return $this;
    }

    /**
     * The ID of an Init Image to use in image2image.
     */
    public function getInitImageId(): ?string
    {
        return $this->initImageId;
    }

    /**
     * The ID of an Init Image to use in image2image.
     */
    public function setInitImageId(?string $initImageId): self
    {
        $this->initialized['initImageId'] = true;
        $this->initImageId = $initImageId;

        return $this;
    }

    /**
     * How strongly the generated images should reflect the original image in image2image. Must be a float between 0.1 and 0.9.
     */
    public function getInitStrength(): ?float
    {
        return $this->initStrength;
    }

    /**
     * How strongly the generated images should reflect the original image in image2image. Must be a float between 0.1 and 0.9.
     */
    public function setInitStrength(?float $initStrength): self
    {
        $this->initialized['initStrength'] = true;
        $this->initStrength = $initStrength;

        return $this;
    }

    /**
     * The model ID used for image generation. If not provided, uses sd_version to determine the version of Stable Diffusion to use. In-app, model IDs are under the Finetune Models menu. Click on the platform model or your custom model, then click View More. For platform models, you can also use the List Platform Models API.
     */
    public function getModelId(): ?string
    {
        return $this->modelId;
    }

    /**
     * The model ID used for image generation. If not provided, uses sd_version to determine the version of Stable Diffusion to use. In-app, model IDs are under the Finetune Models menu. Click on the platform model or your custom model, then click View More. For platform models, you can also use the List Platform Models API.
     */
    public function setModelId(?string $modelId): self
    {
        $this->initialized['modelId'] = true;
        $this->modelId = $modelId;

        return $this;
    }

    /**
     * The negative prompt used for the image generation.
     */
    public function getNegativePrompt(): ?string
    {
        return $this->negativePrompt;
    }

    /**
     * The negative prompt used for the image generation.
     */
    public function setNegativePrompt(?string $negativePrompt): self
    {
        $this->initialized['negativePrompt'] = true;
        $this->negativePrompt = $negativePrompt;

        return $this;
    }

    /**
     * The number of images to generate. Must be between 1 and 8. If either width or height is over 768, must be between 1 and 4.
     */
    public function getNumImages(): ?int
    {
        return $this->numImages;
    }

    /**
     * The number of images to generate. Must be between 1 and 8. If either width or height is over 768, must be between 1 and 4.
     */
    public function setNumImages(?int $numImages): self
    {
        $this->initialized['numImages'] = true;
        $this->numImages = $numImages;

        return $this;
    }

    /**
     * The Step Count to use for the generation. Must be between 10 and 60. Default is 15.
     */
    public function getNumInferenceSteps(): ?int
    {
        return $this->numInferenceSteps;
    }

    /**
     * The Step Count to use for the generation. Must be between 10 and 60. Default is 15.
     */
    public function setNumInferenceSteps(?int $numInferenceSteps): self
    {
        $this->initialized['numInferenceSteps'] = true;
        $this->numInferenceSteps = $numInferenceSteps;

        return $this;
    }

    /**
     * Enable the photoReal feature. Requires enabling alchemy and unspecifying modelId (for photoRealVersion V1).
     */
    public function getPhotoReal(): ?bool
    {
        return $this->photoReal;
    }

    /**
     * Enable the photoReal feature. Requires enabling alchemy and unspecifying modelId (for photoRealVersion V1).
     */
    public function setPhotoReal(?bool $photoReal): self
    {
        $this->initialized['photoReal'] = true;
        $this->photoReal = $photoReal;

        return $this;
    }

    /**
     * The version of photoReal to use. Must be v1 or v2.
     */
    public function getPhotoRealVersion(): ?string
    {
        return $this->photoRealVersion;
    }

    /**
     * The version of photoReal to use. Must be v1 or v2.
     */
    public function setPhotoRealVersion(?string $photoRealVersion): self
    {
        $this->initialized['photoRealVersion'] = true;
        $this->photoRealVersion = $photoRealVersion;

        return $this;
    }

    /**
     * Depth of field of photoReal. Must be 0.55 for low, 0.5 for medium, or 0.45 for high. Defaults to 0.55 if not specified.
     */
    public function getPhotoRealStrength(): ?float
    {
        return $this->photoRealStrength;
    }

    /**
     * Depth of field of photoReal. Must be 0.55 for low, 0.5 for medium, or 0.45 for high. Defaults to 0.55 if not specified.
     */
    public function setPhotoRealStrength(?float $photoRealStrength): self
    {
        $this->initialized['photoRealStrength'] = true;
        $this->photoRealStrength = $photoRealStrength;

        return $this;
    }

    /**
     * The style to generate images with. When photoReal is enabled, refer to the Guide section for a full list. When alchemy is disabled, use LEONARDO or NONE. When alchemy is enabled, use ANIME, CREATIVE, DYNAMIC, ENVIRONMENT, GENERAL, ILLUSTRATION, PHOTOGRAPHY, RAYTRACED, RENDER_3D, SKETCH_BW, SKETCH_COLOR, or NONE.
     */
    public function getPresetStyle(): ?string
    {
        return $this->presetStyle;
    }

    /**
     * The style to generate images with. When photoReal is enabled, refer to the Guide section for a full list. When alchemy is disabled, use LEONARDO or NONE. When alchemy is enabled, use ANIME, CREATIVE, DYNAMIC, ENVIRONMENT, GENERAL, ILLUSTRATION, PHOTOGRAPHY, RAYTRACED, RENDER_3D, SKETCH_BW, SKETCH_COLOR, or NONE.
     */
    public function setPresetStyle(?string $presetStyle): self
    {
        $this->initialized['presetStyle'] = true;
        $this->presetStyle = $presetStyle;

        return $this;
    }

    /**
     * The prompt used to generate images.
     */
    public function getPrompt(): string
    {
        return $this->prompt;
    }

    /**
     * The prompt used to generate images.
     */
    public function setPrompt(string $prompt): self
    {
        $this->initialized['prompt'] = true;
        $this->prompt = $prompt;

        return $this;
    }

    /**
     * Enable to use Prompt Magic.
     */
    public function getPromptMagic(): ?bool
    {
        return $this->promptMagic;
    }

    /**
     * Enable to use Prompt Magic.
     */
    public function setPromptMagic(?bool $promptMagic): self
    {
        $this->initialized['promptMagic'] = true;
        $this->promptMagic = $promptMagic;

        return $this;
    }

    /**
     * Strength of prompt magic. Must be a float between 0.1 and 1.0.
     */
    public function getPromptMagicStrength(): ?float
    {
        return $this->promptMagicStrength;
    }

    /**
     * Strength of prompt magic. Must be a float between 0.1 and 1.0.
     */
    public function setPromptMagicStrength(?float $promptMagicStrength): self
    {
        $this->initialized['promptMagicStrength'] = true;
        $this->promptMagicStrength = $promptMagicStrength;

        return $this;
    }

    /**
     * Prompt magic version v2 or v3, for use when promptMagic: true.
     */
    public function getPromptMagicVersion(): ?string
    {
        return $this->promptMagicVersion;
    }

    /**
     * Prompt magic version v2 or v3, for use when promptMagic: true.
     */
    public function setPromptMagicVersion(?string $promptMagicVersion): self
    {
        $this->initialized['promptMagicVersion'] = true;
        $this->promptMagicVersion = $promptMagicVersion;

        return $this;
    }

    /**
     * Whether the generated images should show in the community feed.
     */
    public function getPublic(): ?bool
    {
        return $this->public;
    }

    /**
     * Whether the generated images should show in the community feed.
     */
    public function setPublic(?bool $public): self
    {
        $this->initialized['public'] = true;
        $this->public = $public;

        return $this;
    }

    /**
     * The scheduler to generate images with. Defaults to EULER_DISCRETE if not specified.
     */
    public function getScheduler(): string
    {
        return $this->scheduler;
    }

    /**
     * The scheduler to generate images with. Defaults to EULER_DISCRETE if not specified.
     */
    public function setScheduler(string $scheduler): self
    {
        $this->initialized['scheduler'] = true;
        $this->scheduler = $scheduler;

        return $this;
    }

    /**
     * The base version of stable diffusion to use if not using a custom model. v1_5 is 1.5, v2 is 2.1, if not specified it will default to v1_5. Also includes SDXL and SDXL Lightning models.
     */
    public function getSdVersion(): string
    {
        return $this->sdVersion;
    }

    /**
     * The base version of stable diffusion to use if not using a custom model. v1_5 is 1.5, v2 is 2.1, if not specified it will default to v1_5. Also includes SDXL and SDXL Lightning models.
     */
    public function setSdVersion(string $sdVersion): self
    {
        $this->initialized['sdVersion'] = true;
        $this->sdVersion = $sdVersion;

        return $this;
    }

    public function getSeed(): ?int
    {
        return $this->seed;
    }

    public function setSeed(?int $seed): self
    {
        $this->initialized['seed'] = true;
        $this->seed = $seed;

        return $this;
    }

    /**
     * Whether the generated images should tile on all axis.
     */
    public function getTiling(): ?bool
    {
        return $this->tiling;
    }

    /**
     * Whether the generated images should tile on all axis.
     */
    public function setTiling(?bool $tiling): self
    {
        $this->initialized['tiling'] = true;
        $this->tiling = $tiling;

        return $this;
    }

    /**
     * Which type of transparency this image should use.
     */
    public function getTransparency(): ?string
    {
        return $this->transparency;
    }

    /**
     * Which type of transparency this image should use.
     */
    public function setTransparency(?string $transparency): self
    {
        $this->initialized['transparency'] = true;
        $this->transparency = $transparency;

        return $this;
    }

    /**
     * Whether the generated images should be unzoomed (requires unzoomAmount and init_image_id to be set).
     */
    public function getUnzoom(): ?bool
    {
        return $this->unzoom;
    }

    /**
     * Whether the generated images should be unzoomed (requires unzoomAmount and init_image_id to be set).
     */
    public function setUnzoom(?bool $unzoom): self
    {
        $this->initialized['unzoom'] = true;
        $this->unzoom = $unzoom;

        return $this;
    }

    /**
     * How much the image should be unzoomed (requires an init_image_id and unzoom to be set to true).
     */
    public function getUnzoomAmount(): ?float
    {
        return $this->unzoomAmount;
    }

    /**
     * How much the image should be unzoomed (requires an init_image_id and unzoom to be set to true).
     */
    public function setUnzoomAmount(?float $unzoomAmount): self
    {
        $this->initialized['unzoomAmount'] = true;
        $this->unzoomAmount = $unzoomAmount;

        return $this;
    }

    /**
     * How much the image should be upscaled. (Enterprise Only).
     */
    public function getUpscaleRatio(): ?float
    {
        return $this->upscaleRatio;
    }

    /**
     * How much the image should be upscaled. (Enterprise Only).
     */
    public function setUpscaleRatio(?float $upscaleRatio): self
    {
        $this->initialized['upscaleRatio'] = true;
        $this->upscaleRatio = $upscaleRatio;

        return $this;
    }

    /**
     * The input width of the images. Must be between 32 and 1024 and be a multiple of 8. Note: Input resolution is not always the same as output resolution due to upscaling from other features.
     */
    public function getWidth(): ?int
    {
        return $this->width;
    }

    /**
     * The input width of the images. Must be between 32 and 1024 and be a multiple of 8. Note: Input resolution is not always the same as output resolution due to upscaling from other features.
     */
    public function setWidth(?int $width): self
    {
        $this->initialized['width'] = true;
        $this->width = $width;

        return $this;
    }

    /**
     * This parameter will be deprecated in September 2024. Please use the controlnets array instead.
     *
     * @deprecated
     */
    public function getControlNet(): ?bool
    {
        return $this->controlNet;
    }

    /**
     * This parameter will be deprecated in September 2024. Please use the controlnets array instead.
     *
     * @deprecated
     */
    public function setControlNet(?bool $controlNet): self
    {
        $this->initialized['controlNet'] = true;
        $this->controlNet = $controlNet;

        return $this;
    }

    /**
     * This parameter will be deprecated in September 2024. Please use the controlnets array instead.
     *
     * @deprecated
     */
    public function getControlNetType(): string
    {
        return $this->controlNetType;
    }

    /**
     * This parameter will be deprecated in September 2024. Please use the controlnets array instead.
     *
     * @deprecated
     */
    public function setControlNetType(string $controlNetType): self
    {
        $this->initialized['controlNetType'] = true;
        $this->controlNetType = $controlNetType;

        return $this;
    }

    /**
     * This parameter will be deprecated in September 2024. Please use the controlnets array instead.
     *
     * @deprecated
     */
    public function getWeighting(): ?float
    {
        return $this->weighting;
    }

    /**
     * This parameter will be deprecated in September 2024. Please use the controlnets array instead.
     *
     * @deprecated
     */
    public function setWeighting(?float $weighting): self
    {
        $this->initialized['weighting'] = true;
        $this->weighting = $weighting;

        return $this;
    }

    /**
     * Whether the generation is for the Canvas Editor feature.
     */
    public function getCanvasRequest(): ?bool
    {
        return $this->canvasRequest;
    }

    /**
     * Whether the generation is for the Canvas Editor feature.
     */
    public function setCanvasRequest(?bool $canvasRequest): self
    {
        $this->initialized['canvasRequest'] = true;
        $this->canvasRequest = $canvasRequest;

        return $this;
    }

    /**
     * The type of request for the Canvas Editor.
     */
    public function getCanvasRequestType(): ?string
    {
        return $this->canvasRequestType;
    }

    /**
     * The type of request for the Canvas Editor.
     */
    public function setCanvasRequestType(?string $canvasRequestType): self
    {
        $this->initialized['canvasRequestType'] = true;
        $this->canvasRequestType = $canvasRequestType;

        return $this;
    }

    /**
     * The ID of an initial image to use in Canvas Editor request.
     */
    public function getCanvasInitId(): ?string
    {
        return $this->canvasInitId;
    }

    /**
     * The ID of an initial image to use in Canvas Editor request.
     */
    public function setCanvasInitId(?string $canvasInitId): self
    {
        $this->initialized['canvasInitId'] = true;
        $this->canvasInitId = $canvasInitId;

        return $this;
    }

    /**
     * The ID of a mask image to use in Canvas Editor request.
     */
    public function getCanvasMaskId(): ?string
    {
        return $this->canvasMaskId;
    }

    /**
     * The ID of a mask image to use in Canvas Editor request.
     */
    public function setCanvasMaskId(?string $canvasMaskId): self
    {
        $this->initialized['canvasMaskId'] = true;
        $this->canvasMaskId = $canvasMaskId;

        return $this;
    }

    /**
     * When enabled, your prompt is expanded to include more detail.
     */
    public function getEnhancePrompt(): ?bool
    {
        return $this->enhancePrompt;
    }

    /**
     * When enabled, your prompt is expanded to include more detail.
     */
    public function setEnhancePrompt(?bool $enhancePrompt): self
    {
        $this->initialized['enhancePrompt'] = true;
        $this->enhancePrompt = $enhancePrompt;

        return $this;
    }

    /**
     * When enhancePrompt is enabled, the prompt is enhanced based on the given instructions.
     */
    public function getEnhancePromptInstruction(): ?string
    {
        return $this->enhancePromptInstruction;
    }

    /**
     * When enhancePrompt is enabled, the prompt is enhanced based on the given instructions.
     */
    public function setEnhancePromptInstruction(?string $enhancePromptInstruction): self
    {
        $this->initialized['enhancePromptInstruction'] = true;
        $this->enhancePromptInstruction = $enhancePromptInstruction;

        return $this;
    }
}
