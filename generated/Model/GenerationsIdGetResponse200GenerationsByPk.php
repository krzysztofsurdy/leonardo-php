<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace CedricZiel\LeonardoAI\Generated\Model;

class GenerationsIdGetResponse200GenerationsByPk extends \ArrayObject
{
    /**
     * @var array
     */
    protected $initialized = [];

    public function isInitialized($property): bool
    {
        return array_key_exists($property, $this->initialized);
    }
    /**
     * @var string
     */
    protected $createdAt;
    /**
     * @var list<GenerationsIdGetResponse200GenerationsByPkGeneratedImagesItem>
     */
    protected $generatedImages;
    /**
     * @var list<GenerationsIdGetResponse200GenerationsByPkGenerationElementsItem>
     */
    protected $generationElements;
    /**
     * @var float|null
     */
    protected $guidanceScale;
    /**
     * @var string|null
     */
    protected $id;
    /**
     * @var int
     */
    protected $imageHeight;
    /**
     * @var int
     */
    protected $imageWidth;
    /**
     * @var int|null
     */
    protected $inferenceSteps;
    /**
     * @var float|null
     */
    protected $initStrength;
    /**
     * @var string|null
     */
    protected $modelId;
    /**
     * @var string|null
     */
    protected $negativePrompt;
    /**
     * If photoReal feature was used.
     *
     * @var bool|null
     */
    protected $photoReal;
    /**
     * Depth of field of photoReal used. 0.55 is low, 0.5 is medium, and 0.45 is high. Default is 0.55.
     *
     * @var float|null
     */
    protected $photoRealStrength;
    /**
     * The style to generate images with. When photoReal is enabled, refer to the Guide section for a full list. When alchemy is disabled, use LEONARDO or NONE. When alchemy is enabled, use ANIME, CREATIVE, DYNAMIC, ENVIRONMENT, GENERAL, ILLUSTRATION, PHOTOGRAPHY, RAYTRACED, RENDER_3D, SKETCH_BW, SKETCH_COLOR, or NONE.
     *
     * @var string|null
     */
    protected $presetStyle = 'DYNAMIC';
    /**
     * @var string
     */
    protected $prompt;
    /**
     * If prompt magic was used.
     *
     * @var bool|null
     */
    protected $promptMagic;
    /**
     * Strength of prompt magic used.
     *
     * @var float|null
     */
    protected $promptMagicStrength;
    /**
     * Version of prompt magic used.
     *
     * @var string|null
     */
    protected $promptMagicVersion;
    /**
     * @var bool
     */
    protected $public;
    /**
     * The scheduler to generate images with. Defaults to EULER_DISCRETE if not specified.
     *
     * @var string
     */
    protected $scheduler;
    /**
     * The base version of stable diffusion to use if not using a custom model. v1_5 is 1.5, v2 is 2.1, if not specified it will default to v1_5. Also includes SDXL and SDXL Lightning models.
     *
     * @var string
     */
    protected $sdVersion;
    /**
     * @var int|null
     */
    protected $seed;
    /**
     * The status of the current task.
     *
     * @var string
     */
    protected $status;

    public function getCreatedAt(): string
    {
        return $this->createdAt;
    }

    public function setCreatedAt(string $createdAt): self
    {
        $this->initialized['createdAt'] = true;
        $this->createdAt = $createdAt;

        return $this;
    }

    /**
     * @return list<GenerationsIdGetResponse200GenerationsByPkGeneratedImagesItem>
     */
    public function getGeneratedImages(): array
    {
        return $this->generatedImages;
    }

    /**
     * @param list<GenerationsIdGetResponse200GenerationsByPkGeneratedImagesItem> $generatedImages
     */
    public function setGeneratedImages(array $generatedImages): self
    {
        $this->initialized['generatedImages'] = true;
        $this->generatedImages = $generatedImages;

        return $this;
    }

    /**
     * @return list<GenerationsIdGetResponse200GenerationsByPkGenerationElementsItem>
     */
    public function getGenerationElements(): array
    {
        return $this->generationElements;
    }

    /**
     * @param list<GenerationsIdGetResponse200GenerationsByPkGenerationElementsItem> $generationElements
     */
    public function setGenerationElements(array $generationElements): self
    {
        $this->initialized['generationElements'] = true;
        $this->generationElements = $generationElements;

        return $this;
    }

    public function getGuidanceScale(): ?float
    {
        return $this->guidanceScale;
    }

    public function setGuidanceScale(?float $guidanceScale): self
    {
        $this->initialized['guidanceScale'] = true;
        $this->guidanceScale = $guidanceScale;

        return $this;
    }

    public function getId(): ?string
    {
        return $this->id;
    }

    public function setId(?string $id): self
    {
        $this->initialized['id'] = true;
        $this->id = $id;

        return $this;
    }

    public function getImageHeight(): int
    {
        return $this->imageHeight;
    }

    public function setImageHeight(int $imageHeight): self
    {
        $this->initialized['imageHeight'] = true;
        $this->imageHeight = $imageHeight;

        return $this;
    }

    public function getImageWidth(): int
    {
        return $this->imageWidth;
    }

    public function setImageWidth(int $imageWidth): self
    {
        $this->initialized['imageWidth'] = true;
        $this->imageWidth = $imageWidth;

        return $this;
    }

    public function getInferenceSteps(): ?int
    {
        return $this->inferenceSteps;
    }

    public function setInferenceSteps(?int $inferenceSteps): self
    {
        $this->initialized['inferenceSteps'] = true;
        $this->inferenceSteps = $inferenceSteps;

        return $this;
    }

    public function getInitStrength(): ?float
    {
        return $this->initStrength;
    }

    public function setInitStrength(?float $initStrength): self
    {
        $this->initialized['initStrength'] = true;
        $this->initStrength = $initStrength;

        return $this;
    }

    public function getModelId(): ?string
    {
        return $this->modelId;
    }

    public function setModelId(?string $modelId): self
    {
        $this->initialized['modelId'] = true;
        $this->modelId = $modelId;

        return $this;
    }

    public function getNegativePrompt(): ?string
    {
        return $this->negativePrompt;
    }

    public function setNegativePrompt(?string $negativePrompt): self
    {
        $this->initialized['negativePrompt'] = true;
        $this->negativePrompt = $negativePrompt;

        return $this;
    }

    /**
     * If photoReal feature was used.
     */
    public function getPhotoReal(): ?bool
    {
        return $this->photoReal;
    }

    /**
     * If photoReal feature was used.
     */
    public function setPhotoReal(?bool $photoReal): self
    {
        $this->initialized['photoReal'] = true;
        $this->photoReal = $photoReal;

        return $this;
    }

    /**
     * Depth of field of photoReal used. 0.55 is low, 0.5 is medium, and 0.45 is high. Default is 0.55.
     */
    public function getPhotoRealStrength(): ?float
    {
        return $this->photoRealStrength;
    }

    /**
     * Depth of field of photoReal used. 0.55 is low, 0.5 is medium, and 0.45 is high. Default is 0.55.
     */
    public function setPhotoRealStrength(?float $photoRealStrength): self
    {
        $this->initialized['photoRealStrength'] = true;
        $this->photoRealStrength = $photoRealStrength;

        return $this;
    }

    /**
     * The style to generate images with. When photoReal is enabled, refer to the Guide section for a full list. When alchemy is disabled, use LEONARDO or NONE. When alchemy is enabled, use ANIME, CREATIVE, DYNAMIC, ENVIRONMENT, GENERAL, ILLUSTRATION, PHOTOGRAPHY, RAYTRACED, RENDER_3D, SKETCH_BW, SKETCH_COLOR, or NONE.
     */
    public function getPresetStyle(): ?string
    {
        return $this->presetStyle;
    }

    /**
     * The style to generate images with. When photoReal is enabled, refer to the Guide section for a full list. When alchemy is disabled, use LEONARDO or NONE. When alchemy is enabled, use ANIME, CREATIVE, DYNAMIC, ENVIRONMENT, GENERAL, ILLUSTRATION, PHOTOGRAPHY, RAYTRACED, RENDER_3D, SKETCH_BW, SKETCH_COLOR, or NONE.
     */
    public function setPresetStyle(?string $presetStyle): self
    {
        $this->initialized['presetStyle'] = true;
        $this->presetStyle = $presetStyle;

        return $this;
    }

    public function getPrompt(): string
    {
        return $this->prompt;
    }

    public function setPrompt(string $prompt): self
    {
        $this->initialized['prompt'] = true;
        $this->prompt = $prompt;

        return $this;
    }

    /**
     * If prompt magic was used.
     */
    public function getPromptMagic(): ?bool
    {
        return $this->promptMagic;
    }

    /**
     * If prompt magic was used.
     */
    public function setPromptMagic(?bool $promptMagic): self
    {
        $this->initialized['promptMagic'] = true;
        $this->promptMagic = $promptMagic;

        return $this;
    }

    /**
     * Strength of prompt magic used.
     */
    public function getPromptMagicStrength(): ?float
    {
        return $this->promptMagicStrength;
    }

    /**
     * Strength of prompt magic used.
     */
    public function setPromptMagicStrength(?float $promptMagicStrength): self
    {
        $this->initialized['promptMagicStrength'] = true;
        $this->promptMagicStrength = $promptMagicStrength;

        return $this;
    }

    /**
     * Version of prompt magic used.
     */
    public function getPromptMagicVersion(): ?string
    {
        return $this->promptMagicVersion;
    }

    /**
     * Version of prompt magic used.
     */
    public function setPromptMagicVersion(?string $promptMagicVersion): self
    {
        $this->initialized['promptMagicVersion'] = true;
        $this->promptMagicVersion = $promptMagicVersion;

        return $this;
    }

    public function getPublic(): bool
    {
        return $this->public;
    }

    public function setPublic(bool $public): self
    {
        $this->initialized['public'] = true;
        $this->public = $public;

        return $this;
    }

    /**
     * The scheduler to generate images with. Defaults to EULER_DISCRETE if not specified.
     */
    public function getScheduler(): string
    {
        return $this->scheduler;
    }

    /**
     * The scheduler to generate images with. Defaults to EULER_DISCRETE if not specified.
     */
    public function setScheduler(string $scheduler): self
    {
        $this->initialized['scheduler'] = true;
        $this->scheduler = $scheduler;

        return $this;
    }

    /**
     * The base version of stable diffusion to use if not using a custom model. v1_5 is 1.5, v2 is 2.1, if not specified it will default to v1_5. Also includes SDXL and SDXL Lightning models.
     */
    public function getSdVersion(): string
    {
        return $this->sdVersion;
    }

    /**
     * The base version of stable diffusion to use if not using a custom model. v1_5 is 1.5, v2 is 2.1, if not specified it will default to v1_5. Also includes SDXL and SDXL Lightning models.
     */
    public function setSdVersion(string $sdVersion): self
    {
        $this->initialized['sdVersion'] = true;
        $this->sdVersion = $sdVersion;

        return $this;
    }

    public function getSeed(): ?int
    {
        return $this->seed;
    }

    public function setSeed(?int $seed): self
    {
        $this->initialized['seed'] = true;
        $this->seed = $seed;

        return $this;
    }

    /**
     * The status of the current task.
     */
    public function getStatus(): string
    {
        return $this->status;
    }

    /**
     * The status of the current task.
     */
    public function setStatus(string $status): self
    {
        $this->initialized['status'] = true;
        $this->status = $status;

        return $this;
    }
}
