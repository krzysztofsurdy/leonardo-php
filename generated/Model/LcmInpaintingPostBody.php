<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace CedricZiel\LeonardoAI\Generated\Model;

class LcmInpaintingPostBody extends \ArrayObject
{
    /**
     * @var array
     */
    protected $initialized = [];

    public function isInitialized($property): bool
    {
        return array_key_exists($property, $this->initialized);
    }
    /**
     * Image data used to generate image. In base64 format. Prefix: `data:image/jpeg;base64,`.
     *
     * @var string
     */
    protected $imageDataUrl;
    /**
     * Image data of the mask layer used for inpainting. In base64 format. Prefix: `data:image/jpeg;base64,`. Mask should be white on black where generation is applied to the white area.
     *
     * @var string
     */
    protected $maskDataUrl;
    /**
     * The prompt used to generate images.
     *
     * @var string
     */
    protected $prompt;
    /**
     * How strongly the generation should reflect the prompt. Must be a float between 0.5 and 20.
     *
     * @var float|null
     */
    protected $guidance;
    /**
     * Creativity strength of generation. Higher strength will deviate more from the original image supplied in imageDataUrl. Must be a float between 0.1 and 1.
     *
     * @var float|null
     */
    protected $strength;
    /**
     * @var string
     */
    protected $requestTimestamp;
    /**
     * The style to generate LCM images with.
     *
     * @var string|null
     */
    protected $style;
    /**
     * The number of steps to use for the generation. Must be between 4 and 16.
     *
     * @var int|null
     */
    protected $steps;
    /**
     * The output width of the image. Must be 512, 640 or 1024.
     *
     * @var int|null
     */
    protected $width = 512;
    /**
     * The output width of the image. Must be 512, 640 or 1024.
     *
     * @var int|null
     */
    protected $height = 512;
    /**
     * @var int|null
     */
    protected $seed;

    /**
     * Image data used to generate image. In base64 format. Prefix: `data:image/jpeg;base64,`.
     */
    public function getImageDataUrl(): string
    {
        return $this->imageDataUrl;
    }

    /**
     * Image data used to generate image. In base64 format. Prefix: `data:image/jpeg;base64,`.
     */
    public function setImageDataUrl(string $imageDataUrl): self
    {
        $this->initialized['imageDataUrl'] = true;
        $this->imageDataUrl = $imageDataUrl;

        return $this;
    }

    /**
     * Image data of the mask layer used for inpainting. In base64 format. Prefix: `data:image/jpeg;base64,`. Mask should be white on black where generation is applied to the white area.
     */
    public function getMaskDataUrl(): string
    {
        return $this->maskDataUrl;
    }

    /**
     * Image data of the mask layer used for inpainting. In base64 format. Prefix: `data:image/jpeg;base64,`. Mask should be white on black where generation is applied to the white area.
     */
    public function setMaskDataUrl(string $maskDataUrl): self
    {
        $this->initialized['maskDataUrl'] = true;
        $this->maskDataUrl = $maskDataUrl;

        return $this;
    }

    /**
     * The prompt used to generate images.
     */
    public function getPrompt(): string
    {
        return $this->prompt;
    }

    /**
     * The prompt used to generate images.
     */
    public function setPrompt(string $prompt): self
    {
        $this->initialized['prompt'] = true;
        $this->prompt = $prompt;

        return $this;
    }

    /**
     * How strongly the generation should reflect the prompt. Must be a float between 0.5 and 20.
     */
    public function getGuidance(): ?float
    {
        return $this->guidance;
    }

    /**
     * How strongly the generation should reflect the prompt. Must be a float between 0.5 and 20.
     */
    public function setGuidance(?float $guidance): self
    {
        $this->initialized['guidance'] = true;
        $this->guidance = $guidance;

        return $this;
    }

    /**
     * Creativity strength of generation. Higher strength will deviate more from the original image supplied in imageDataUrl. Must be a float between 0.1 and 1.
     */
    public function getStrength(): ?float
    {
        return $this->strength;
    }

    /**
     * Creativity strength of generation. Higher strength will deviate more from the original image supplied in imageDataUrl. Must be a float between 0.1 and 1.
     */
    public function setStrength(?float $strength): self
    {
        $this->initialized['strength'] = true;
        $this->strength = $strength;

        return $this;
    }

    public function getRequestTimestamp(): string
    {
        return $this->requestTimestamp;
    }

    public function setRequestTimestamp(string $requestTimestamp): self
    {
        $this->initialized['requestTimestamp'] = true;
        $this->requestTimestamp = $requestTimestamp;

        return $this;
    }

    /**
     * The style to generate LCM images with.
     */
    public function getStyle(): ?string
    {
        return $this->style;
    }

    /**
     * The style to generate LCM images with.
     */
    public function setStyle(?string $style): self
    {
        $this->initialized['style'] = true;
        $this->style = $style;

        return $this;
    }

    /**
     * The number of steps to use for the generation. Must be between 4 and 16.
     */
    public function getSteps(): ?int
    {
        return $this->steps;
    }

    /**
     * The number of steps to use for the generation. Must be between 4 and 16.
     */
    public function setSteps(?int $steps): self
    {
        $this->initialized['steps'] = true;
        $this->steps = $steps;

        return $this;
    }

    /**
     * The output width of the image. Must be 512, 640 or 1024.
     */
    public function getWidth(): ?int
    {
        return $this->width;
    }

    /**
     * The output width of the image. Must be 512, 640 or 1024.
     */
    public function setWidth(?int $width): self
    {
        $this->initialized['width'] = true;
        $this->width = $width;

        return $this;
    }

    /**
     * The output width of the image. Must be 512, 640 or 1024.
     */
    public function getHeight(): ?int
    {
        return $this->height;
    }

    /**
     * The output width of the image. Must be 512, 640 or 1024.
     */
    public function setHeight(?int $height): self
    {
        $this->initialized['height'] = true;
        $this->height = $height;

        return $this;
    }

    public function getSeed(): ?int
    {
        return $this->seed;
    }

    public function setSeed(?int $seed): self
    {
        $this->initialized['seed'] = true;
        $this->seed = $seed;

        return $this;
    }
}
