<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace CedricZiel\LeonardoAI\Generated\Normalizer;

use CedricZiel\LeonardoAI\Generated\Runtime\Normalizer\CheckArray;
use CedricZiel\LeonardoAI\Generated\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\HttpKernel\Kernel;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

if (!class_exists(Kernel::class) or (Kernel::MAJOR_VERSION >= 7 or Kernel::MAJOR_VERSION === 6 and Kernel::MINOR_VERSION === 4)) {
    class GenerationsTexturePostBodyNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
    {
        use DenormalizerAwareTrait;
        use NormalizerAwareTrait;
        use CheckArray;
        use ValidatorTrait;

        public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
        {
            return $type === \CedricZiel\LeonardoAI\Generated\Model\GenerationsTexturePostBody::class;
        }

        public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
        {
            return is_object($data) && get_class($data) === CedricZiel\LeonardoAI\Generated\Model\GenerationsTexturePostBody::class;
        }

        public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
        {
            if (isset($data['$ref'])) {
                return new Reference($data['$ref'], $context['document-origin']);
            }
            if (isset($data['$recursiveRef'])) {
                return new Reference($data['$recursiveRef'], $context['document-origin']);
            }
            $object = new \CedricZiel\LeonardoAI\Generated\Model\GenerationsTexturePostBody();
            if (null === $data || false === \is_array($data)) {
                return $object;
            }
            if (\array_key_exists('front_rotation_offset', $data) && $data['front_rotation_offset'] !== null) {
                $object->setFrontRotationOffset($data['front_rotation_offset']);
                unset($data['front_rotation_offset']);
            } elseif (\array_key_exists('front_rotation_offset', $data) && $data['front_rotation_offset'] === null) {
                $object->setFrontRotationOffset(null);
            }
            if (\array_key_exists('modelAssetId', $data)) {
                $object->setModelAssetId($data['modelAssetId']);
                unset($data['modelAssetId']);
            }
            if (\array_key_exists('negative_prompt', $data) && $data['negative_prompt'] !== null) {
                $object->setNegativePrompt($data['negative_prompt']);
                unset($data['negative_prompt']);
            } elseif (\array_key_exists('negative_prompt', $data) && $data['negative_prompt'] === null) {
                $object->setNegativePrompt(null);
            }
            if (\array_key_exists('preview', $data) && $data['preview'] !== null) {
                $object->setPreview($data['preview']);
                unset($data['preview']);
            } elseif (\array_key_exists('preview', $data) && $data['preview'] === null) {
                $object->setPreview(null);
            }
            if (\array_key_exists('preview_direction', $data) && $data['preview_direction'] !== null) {
                $object->setPreviewDirection($data['preview_direction']);
                unset($data['preview_direction']);
            } elseif (\array_key_exists('preview_direction', $data) && $data['preview_direction'] === null) {
                $object->setPreviewDirection(null);
            }
            if (\array_key_exists('prompt', $data)) {
                $object->setPrompt($data['prompt']);
                unset($data['prompt']);
            }
            if (\array_key_exists('sd_version', $data) && $data['sd_version'] !== null) {
                $object->setSdVersion($data['sd_version']);
                unset($data['sd_version']);
            } elseif (\array_key_exists('sd_version', $data) && $data['sd_version'] === null) {
                $object->setSdVersion(null);
            }
            if (\array_key_exists('seed', $data) && $data['seed'] !== null) {
                $object->setSeed($data['seed']);
                unset($data['seed']);
            } elseif (\array_key_exists('seed', $data) && $data['seed'] === null) {
                $object->setSeed(null);
            }
            foreach ($data as $key => $value) {
                if (preg_match('/.*/', (string) $key)) {
                    $object[$key] = $value;
                }
            }

            return $object;
        }

        public function normalize(mixed $object, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
        {
            $data = [];
            if ($object->isInitialized('frontRotationOffset') && null !== $object->getFrontRotationOffset()) {
                $data['front_rotation_offset'] = $object->getFrontRotationOffset();
            }
            if ($object->isInitialized('modelAssetId') && null !== $object->getModelAssetId()) {
                $data['modelAssetId'] = $object->getModelAssetId();
            }
            if ($object->isInitialized('negativePrompt') && null !== $object->getNegativePrompt()) {
                $data['negative_prompt'] = $object->getNegativePrompt();
            }
            if ($object->isInitialized('preview') && null !== $object->getPreview()) {
                $data['preview'] = $object->getPreview();
            }
            if ($object->isInitialized('previewDirection') && null !== $object->getPreviewDirection()) {
                $data['preview_direction'] = $object->getPreviewDirection();
            }
            if ($object->isInitialized('prompt') && null !== $object->getPrompt()) {
                $data['prompt'] = $object->getPrompt();
            }
            if ($object->isInitialized('sdVersion') && null !== $object->getSdVersion()) {
                $data['sd_version'] = $object->getSdVersion();
            }
            if ($object->isInitialized('seed') && null !== $object->getSeed()) {
                $data['seed'] = $object->getSeed();
            }
            foreach ($object as $key => $value) {
                if (preg_match('/.*/', (string) $key)) {
                    $data[$key] = $value;
                }
            }

            return $data;
        }

        public function getSupportedTypes(?string $format = null): array
        {
            return [\CedricZiel\LeonardoAI\Generated\Model\GenerationsTexturePostBody::class => false];
        }
    }
} else {
    class GenerationsTexturePostBodyNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
    {
        use DenormalizerAwareTrait;
        use NormalizerAwareTrait;
        use CheckArray;
        use ValidatorTrait;

        public function supportsDenormalization($data, $type, ?string $format = null, array $context = []): bool
        {
            return $type === \CedricZiel\LeonardoAI\Generated\Model\GenerationsTexturePostBody::class;
        }

        public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
        {
            return is_object($data) && get_class($data) === CedricZiel\LeonardoAI\Generated\Model\GenerationsTexturePostBody::class;
        }

        public function denormalize($data, $type, $format = null, array $context = [])
        {
            if (isset($data['$ref'])) {
                return new Reference($data['$ref'], $context['document-origin']);
            }
            if (isset($data['$recursiveRef'])) {
                return new Reference($data['$recursiveRef'], $context['document-origin']);
            }
            $object = new \CedricZiel\LeonardoAI\Generated\Model\GenerationsTexturePostBody();
            if (null === $data || false === \is_array($data)) {
                return $object;
            }
            if (\array_key_exists('front_rotation_offset', $data) && $data['front_rotation_offset'] !== null) {
                $object->setFrontRotationOffset($data['front_rotation_offset']);
                unset($data['front_rotation_offset']);
            } elseif (\array_key_exists('front_rotation_offset', $data) && $data['front_rotation_offset'] === null) {
                $object->setFrontRotationOffset(null);
            }
            if (\array_key_exists('modelAssetId', $data)) {
                $object->setModelAssetId($data['modelAssetId']);
                unset($data['modelAssetId']);
            }
            if (\array_key_exists('negative_prompt', $data) && $data['negative_prompt'] !== null) {
                $object->setNegativePrompt($data['negative_prompt']);
                unset($data['negative_prompt']);
            } elseif (\array_key_exists('negative_prompt', $data) && $data['negative_prompt'] === null) {
                $object->setNegativePrompt(null);
            }
            if (\array_key_exists('preview', $data) && $data['preview'] !== null) {
                $object->setPreview($data['preview']);
                unset($data['preview']);
            } elseif (\array_key_exists('preview', $data) && $data['preview'] === null) {
                $object->setPreview(null);
            }
            if (\array_key_exists('preview_direction', $data) && $data['preview_direction'] !== null) {
                $object->setPreviewDirection($data['preview_direction']);
                unset($data['preview_direction']);
            } elseif (\array_key_exists('preview_direction', $data) && $data['preview_direction'] === null) {
                $object->setPreviewDirection(null);
            }
            if (\array_key_exists('prompt', $data)) {
                $object->setPrompt($data['prompt']);
                unset($data['prompt']);
            }
            if (\array_key_exists('sd_version', $data) && $data['sd_version'] !== null) {
                $object->setSdVersion($data['sd_version']);
                unset($data['sd_version']);
            } elseif (\array_key_exists('sd_version', $data) && $data['sd_version'] === null) {
                $object->setSdVersion(null);
            }
            if (\array_key_exists('seed', $data) && $data['seed'] !== null) {
                $object->setSeed($data['seed']);
                unset($data['seed']);
            } elseif (\array_key_exists('seed', $data) && $data['seed'] === null) {
                $object->setSeed(null);
            }
            foreach ($data as $key => $value) {
                if (preg_match('/.*/', (string) $key)) {
                    $object[$key] = $value;
                }
            }

            return $object;
        }

        /**
         * @return array|string|int|float|bool|\ArrayObject|null
         */
        public function normalize($object, $format = null, array $context = [])
        {
            $data = [];
            if ($object->isInitialized('frontRotationOffset') && null !== $object->getFrontRotationOffset()) {
                $data['front_rotation_offset'] = $object->getFrontRotationOffset();
            }
            if ($object->isInitialized('modelAssetId') && null !== $object->getModelAssetId()) {
                $data['modelAssetId'] = $object->getModelAssetId();
            }
            if ($object->isInitialized('negativePrompt') && null !== $object->getNegativePrompt()) {
                $data['negative_prompt'] = $object->getNegativePrompt();
            }
            if ($object->isInitialized('preview') && null !== $object->getPreview()) {
                $data['preview'] = $object->getPreview();
            }
            if ($object->isInitialized('previewDirection') && null !== $object->getPreviewDirection()) {
                $data['preview_direction'] = $object->getPreviewDirection();
            }
            if ($object->isInitialized('prompt') && null !== $object->getPrompt()) {
                $data['prompt'] = $object->getPrompt();
            }
            if ($object->isInitialized('sdVersion') && null !== $object->getSdVersion()) {
                $data['sd_version'] = $object->getSdVersion();
            }
            if ($object->isInitialized('seed') && null !== $object->getSeed()) {
                $data['seed'] = $object->getSeed();
            }
            foreach ($object as $key => $value) {
                if (preg_match('/.*/', (string) $key)) {
                    $data[$key] = $value;
                }
            }

            return $data;
        }

        public function getSupportedTypes(?string $format = null): array
        {
            return [\CedricZiel\LeonardoAI\Generated\Model\GenerationsTexturePostBody::class => false];
        }
    }
}
