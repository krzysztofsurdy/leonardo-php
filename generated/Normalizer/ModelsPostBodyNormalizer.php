<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace CedricZiel\LeonardoAI\Generated\Normalizer;

use CedricZiel\LeonardoAI\Generated\Runtime\Normalizer\CheckArray;
use CedricZiel\LeonardoAI\Generated\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\HttpKernel\Kernel;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

if (!class_exists(Kernel::class) or (Kernel::MAJOR_VERSION >= 7 or Kernel::MAJOR_VERSION === 6 and Kernel::MINOR_VERSION === 4)) {
    class ModelsPostBodyNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
    {
        use DenormalizerAwareTrait;
        use NormalizerAwareTrait;
        use CheckArray;
        use ValidatorTrait;

        public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
        {
            return $type === \CedricZiel\LeonardoAI\Generated\Model\ModelsPostBody::class;
        }

        public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
        {
            return is_object($data) && get_class($data) === CedricZiel\LeonardoAI\Generated\Model\ModelsPostBody::class;
        }

        public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
        {
            if (isset($data['$ref'])) {
                return new Reference($data['$ref'], $context['document-origin']);
            }
            if (isset($data['$recursiveRef'])) {
                return new Reference($data['$recursiveRef'], $context['document-origin']);
            }
            $object = new \CedricZiel\LeonardoAI\Generated\Model\ModelsPostBody();
            if (null === $data || false === \is_array($data)) {
                return $object;
            }
            if (\array_key_exists('name', $data)) {
                $object->setName($data['name']);
                unset($data['name']);
            }
            if (\array_key_exists('description', $data) && $data['description'] !== null) {
                $object->setDescription($data['description']);
                unset($data['description']);
            } elseif (\array_key_exists('description', $data) && $data['description'] === null) {
                $object->setDescription(null);
            }
            if (\array_key_exists('datasetId', $data)) {
                $object->setDatasetId($data['datasetId']);
                unset($data['datasetId']);
            }
            if (\array_key_exists('instance_prompt', $data)) {
                $object->setInstancePrompt($data['instance_prompt']);
                unset($data['instance_prompt']);
            }
            if (\array_key_exists('modelType', $data)) {
                $object->setModelType($data['modelType']);
                unset($data['modelType']);
            }
            if (\array_key_exists('nsfw', $data) && $data['nsfw'] !== null) {
                $object->setNsfw($data['nsfw']);
                unset($data['nsfw']);
            } elseif (\array_key_exists('nsfw', $data) && $data['nsfw'] === null) {
                $object->setNsfw(null);
            }
            if (\array_key_exists('resolution', $data) && $data['resolution'] !== null) {
                $object->setResolution($data['resolution']);
                unset($data['resolution']);
            } elseif (\array_key_exists('resolution', $data) && $data['resolution'] === null) {
                $object->setResolution(null);
            }
            if (\array_key_exists('sd_Version', $data)) {
                $object->setSdVersion($data['sd_Version']);
                unset($data['sd_Version']);
            }
            if (\array_key_exists('strength', $data)) {
                $object->setStrength($data['strength']);
                unset($data['strength']);
            }
            foreach ($data as $key => $value) {
                if (preg_match('/.*/', (string) $key)) {
                    $object[$key] = $value;
                }
            }

            return $object;
        }

        public function normalize(mixed $object, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
        {
            $data = [];
            $data['name'] = $object->getName();
            if ($object->isInitialized('description') && null !== $object->getDescription()) {
                $data['description'] = $object->getDescription();
            }
            $data['datasetId'] = $object->getDatasetId();
            $data['instance_prompt'] = $object->getInstancePrompt();
            if ($object->isInitialized('modelType') && null !== $object->getModelType()) {
                $data['modelType'] = $object->getModelType();
            }
            if ($object->isInitialized('nsfw') && null !== $object->getNsfw()) {
                $data['nsfw'] = $object->getNsfw();
            }
            if ($object->isInitialized('resolution') && null !== $object->getResolution()) {
                $data['resolution'] = $object->getResolution();
            }
            if ($object->isInitialized('sdVersion') && null !== $object->getSdVersion()) {
                $data['sd_Version'] = $object->getSdVersion();
            }
            if ($object->isInitialized('strength') && null !== $object->getStrength()) {
                $data['strength'] = $object->getStrength();
            }
            foreach ($object as $key => $value) {
                if (preg_match('/.*/', (string) $key)) {
                    $data[$key] = $value;
                }
            }

            return $data;
        }

        public function getSupportedTypes(?string $format = null): array
        {
            return [\CedricZiel\LeonardoAI\Generated\Model\ModelsPostBody::class => false];
        }
    }
} else {
    class ModelsPostBodyNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
    {
        use DenormalizerAwareTrait;
        use NormalizerAwareTrait;
        use CheckArray;
        use ValidatorTrait;

        public function supportsDenormalization($data, $type, ?string $format = null, array $context = []): bool
        {
            return $type === \CedricZiel\LeonardoAI\Generated\Model\ModelsPostBody::class;
        }

        public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
        {
            return is_object($data) && get_class($data) === CedricZiel\LeonardoAI\Generated\Model\ModelsPostBody::class;
        }

        public function denormalize($data, $type, $format = null, array $context = [])
        {
            if (isset($data['$ref'])) {
                return new Reference($data['$ref'], $context['document-origin']);
            }
            if (isset($data['$recursiveRef'])) {
                return new Reference($data['$recursiveRef'], $context['document-origin']);
            }
            $object = new \CedricZiel\LeonardoAI\Generated\Model\ModelsPostBody();
            if (null === $data || false === \is_array($data)) {
                return $object;
            }
            if (\array_key_exists('name', $data)) {
                $object->setName($data['name']);
                unset($data['name']);
            }
            if (\array_key_exists('description', $data) && $data['description'] !== null) {
                $object->setDescription($data['description']);
                unset($data['description']);
            } elseif (\array_key_exists('description', $data) && $data['description'] === null) {
                $object->setDescription(null);
            }
            if (\array_key_exists('datasetId', $data)) {
                $object->setDatasetId($data['datasetId']);
                unset($data['datasetId']);
            }
            if (\array_key_exists('instance_prompt', $data)) {
                $object->setInstancePrompt($data['instance_prompt']);
                unset($data['instance_prompt']);
            }
            if (\array_key_exists('modelType', $data)) {
                $object->setModelType($data['modelType']);
                unset($data['modelType']);
            }
            if (\array_key_exists('nsfw', $data) && $data['nsfw'] !== null) {
                $object->setNsfw($data['nsfw']);
                unset($data['nsfw']);
            } elseif (\array_key_exists('nsfw', $data) && $data['nsfw'] === null) {
                $object->setNsfw(null);
            }
            if (\array_key_exists('resolution', $data) && $data['resolution'] !== null) {
                $object->setResolution($data['resolution']);
                unset($data['resolution']);
            } elseif (\array_key_exists('resolution', $data) && $data['resolution'] === null) {
                $object->setResolution(null);
            }
            if (\array_key_exists('sd_Version', $data)) {
                $object->setSdVersion($data['sd_Version']);
                unset($data['sd_Version']);
            }
            if (\array_key_exists('strength', $data)) {
                $object->setStrength($data['strength']);
                unset($data['strength']);
            }
            foreach ($data as $key => $value) {
                if (preg_match('/.*/', (string) $key)) {
                    $object[$key] = $value;
                }
            }

            return $object;
        }

        /**
         * @return array|string|int|float|bool|\ArrayObject|null
         */
        public function normalize($object, $format = null, array $context = [])
        {
            $data = [];
            $data['name'] = $object->getName();
            if ($object->isInitialized('description') && null !== $object->getDescription()) {
                $data['description'] = $object->getDescription();
            }
            $data['datasetId'] = $object->getDatasetId();
            $data['instance_prompt'] = $object->getInstancePrompt();
            if ($object->isInitialized('modelType') && null !== $object->getModelType()) {
                $data['modelType'] = $object->getModelType();
            }
            if ($object->isInitialized('nsfw') && null !== $object->getNsfw()) {
                $data['nsfw'] = $object->getNsfw();
            }
            if ($object->isInitialized('resolution') && null !== $object->getResolution()) {
                $data['resolution'] = $object->getResolution();
            }
            if ($object->isInitialized('sdVersion') && null !== $object->getSdVersion()) {
                $data['sd_Version'] = $object->getSdVersion();
            }
            if ($object->isInitialized('strength') && null !== $object->getStrength()) {
                $data['strength'] = $object->getStrength();
            }
            foreach ($object as $key => $value) {
                if (preg_match('/.*/', (string) $key)) {
                    $data[$key] = $value;
                }
            }

            return $data;
        }

        public function getSupportedTypes(?string $format = null): array
        {
            return [\CedricZiel\LeonardoAI\Generated\Model\ModelsPostBody::class => false];
        }
    }
}
