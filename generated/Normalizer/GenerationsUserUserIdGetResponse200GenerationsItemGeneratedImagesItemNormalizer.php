<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace CedricZiel\LeonardoAI\Generated\Normalizer;

use CedricZiel\LeonardoAI\Generated\Runtime\Normalizer\CheckArray;
use CedricZiel\LeonardoAI\Generated\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\HttpKernel\Kernel;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

if (!class_exists(Kernel::class) or (Kernel::MAJOR_VERSION >= 7 or Kernel::MAJOR_VERSION === 6 and Kernel::MINOR_VERSION === 4)) {
    class GenerationsUserUserIdGetResponse200GenerationsItemGeneratedImagesItemNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
    {
        use DenormalizerAwareTrait;
        use NormalizerAwareTrait;
        use CheckArray;
        use ValidatorTrait;

        public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
        {
            return $type === \CedricZiel\LeonardoAI\Generated\Model\GenerationsUserUserIdGetResponse200GenerationsItemGeneratedImagesItem::class;
        }

        public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
        {
            return is_object($data) && get_class($data) === CedricZiel\LeonardoAI\Generated\Model\GenerationsUserUserIdGetResponse200GenerationsItemGeneratedImagesItem::class;
        }

        public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
        {
            if (isset($data['$ref'])) {
                return new Reference($data['$ref'], $context['document-origin']);
            }
            if (isset($data['$recursiveRef'])) {
                return new Reference($data['$recursiveRef'], $context['document-origin']);
            }
            $object = new \CedricZiel\LeonardoAI\Generated\Model\GenerationsUserUserIdGetResponse200GenerationsItemGeneratedImagesItem();
            if (null === $data || false === \is_array($data)) {
                return $object;
            }
            if (\array_key_exists('generated_image_variation_generics', $data)) {
                $values = [];
                foreach ($data['generated_image_variation_generics'] as $value) {
                    $values[] = $this->denormalizer->denormalize($value, \CedricZiel\LeonardoAI\Generated\Model\GenerationsUserUserIdGetResponse200GenerationsItemGeneratedImagesItemGeneratedImageVariationGenericsItem::class, 'json', $context);
                }
                $object->setGeneratedImageVariationGenerics($values);
                unset($data['generated_image_variation_generics']);
            }
            if (\array_key_exists('id', $data) && $data['id'] !== null) {
                $object->setId($data['id']);
                unset($data['id']);
            } elseif (\array_key_exists('id', $data) && $data['id'] === null) {
                $object->setId(null);
            }
            if (\array_key_exists('imageToVideo', $data) && $data['imageToVideo'] !== null) {
                $object->setImageToVideo($data['imageToVideo']);
                unset($data['imageToVideo']);
            } elseif (\array_key_exists('imageToVideo', $data) && $data['imageToVideo'] === null) {
                $object->setImageToVideo(null);
            }
            if (\array_key_exists('likeCount', $data)) {
                $object->setLikeCount($data['likeCount']);
                unset($data['likeCount']);
            }
            if (\array_key_exists('motion', $data) && $data['motion'] !== null) {
                $object->setMotion($data['motion']);
                unset($data['motion']);
            } elseif (\array_key_exists('motion', $data) && $data['motion'] === null) {
                $object->setMotion(null);
            }
            if (\array_key_exists('motionModel', $data) && $data['motionModel'] !== null) {
                $object->setMotionModel($data['motionModel']);
                unset($data['motionModel']);
            } elseif (\array_key_exists('motionModel', $data) && $data['motionModel'] === null) {
                $object->setMotionModel(null);
            }
            if (\array_key_exists('motionMP4URL', $data) && $data['motionMP4URL'] !== null) {
                $object->setMotionMP4URL($data['motionMP4URL']);
                unset($data['motionMP4URL']);
            } elseif (\array_key_exists('motionMP4URL', $data) && $data['motionMP4URL'] === null) {
                $object->setMotionMP4URL(null);
            }
            if (\array_key_exists('motionStrength', $data) && $data['motionStrength'] !== null) {
                $object->setMotionStrength($data['motionStrength']);
                unset($data['motionStrength']);
            } elseif (\array_key_exists('motionStrength', $data) && $data['motionStrength'] === null) {
                $object->setMotionStrength(null);
            }
            if (\array_key_exists('nsfw', $data)) {
                $object->setNsfw($data['nsfw']);
                unset($data['nsfw']);
            }
            if (\array_key_exists('url', $data)) {
                $object->setUrl($data['url']);
                unset($data['url']);
            }
            foreach ($data as $key => $value_1) {
                if (preg_match('/.*/', (string) $key)) {
                    $object[$key] = $value_1;
                }
            }

            return $object;
        }

        public function normalize(mixed $object, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
        {
            $data = [];
            if ($object->isInitialized('generatedImageVariationGenerics') && null !== $object->getGeneratedImageVariationGenerics()) {
                $values = [];
                foreach ($object->getGeneratedImageVariationGenerics() as $value) {
                    $values[] = $this->normalizer->normalize($value, 'json', $context);
                }
                $data['generated_image_variation_generics'] = $values;
            }
            if ($object->isInitialized('id') && null !== $object->getId()) {
                $data['id'] = $object->getId();
            }
            if ($object->isInitialized('imageToVideo') && null !== $object->getImageToVideo()) {
                $data['imageToVideo'] = $object->getImageToVideo();
            }
            if ($object->isInitialized('likeCount') && null !== $object->getLikeCount()) {
                $data['likeCount'] = $object->getLikeCount();
            }
            if ($object->isInitialized('motion') && null !== $object->getMotion()) {
                $data['motion'] = $object->getMotion();
            }
            if ($object->isInitialized('motionModel') && null !== $object->getMotionModel()) {
                $data['motionModel'] = $object->getMotionModel();
            }
            if ($object->isInitialized('motionMP4URL') && null !== $object->getMotionMP4URL()) {
                $data['motionMP4URL'] = $object->getMotionMP4URL();
            }
            if ($object->isInitialized('motionStrength') && null !== $object->getMotionStrength()) {
                $data['motionStrength'] = $object->getMotionStrength();
            }
            if ($object->isInitialized('nsfw') && null !== $object->getNsfw()) {
                $data['nsfw'] = $object->getNsfw();
            }
            if ($object->isInitialized('url') && null !== $object->getUrl()) {
                $data['url'] = $object->getUrl();
            }
            foreach ($object as $key => $value_1) {
                if (preg_match('/.*/', (string) $key)) {
                    $data[$key] = $value_1;
                }
            }

            return $data;
        }

        public function getSupportedTypes(?string $format = null): array
        {
            return [\CedricZiel\LeonardoAI\Generated\Model\GenerationsUserUserIdGetResponse200GenerationsItemGeneratedImagesItem::class => false];
        }
    }
} else {
    class GenerationsUserUserIdGetResponse200GenerationsItemGeneratedImagesItemNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
    {
        use DenormalizerAwareTrait;
        use NormalizerAwareTrait;
        use CheckArray;
        use ValidatorTrait;

        public function supportsDenormalization($data, $type, ?string $format = null, array $context = []): bool
        {
            return $type === \CedricZiel\LeonardoAI\Generated\Model\GenerationsUserUserIdGetResponse200GenerationsItemGeneratedImagesItem::class;
        }

        public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
        {
            return is_object($data) && get_class($data) === CedricZiel\LeonardoAI\Generated\Model\GenerationsUserUserIdGetResponse200GenerationsItemGeneratedImagesItem::class;
        }

        public function denormalize($data, $type, $format = null, array $context = [])
        {
            if (isset($data['$ref'])) {
                return new Reference($data['$ref'], $context['document-origin']);
            }
            if (isset($data['$recursiveRef'])) {
                return new Reference($data['$recursiveRef'], $context['document-origin']);
            }
            $object = new \CedricZiel\LeonardoAI\Generated\Model\GenerationsUserUserIdGetResponse200GenerationsItemGeneratedImagesItem();
            if (null === $data || false === \is_array($data)) {
                return $object;
            }
            if (\array_key_exists('generated_image_variation_generics', $data)) {
                $values = [];
                foreach ($data['generated_image_variation_generics'] as $value) {
                    $values[] = $this->denormalizer->denormalize($value, \CedricZiel\LeonardoAI\Generated\Model\GenerationsUserUserIdGetResponse200GenerationsItemGeneratedImagesItemGeneratedImageVariationGenericsItem::class, 'json', $context);
                }
                $object->setGeneratedImageVariationGenerics($values);
                unset($data['generated_image_variation_generics']);
            }
            if (\array_key_exists('id', $data) && $data['id'] !== null) {
                $object->setId($data['id']);
                unset($data['id']);
            } elseif (\array_key_exists('id', $data) && $data['id'] === null) {
                $object->setId(null);
            }
            if (\array_key_exists('imageToVideo', $data) && $data['imageToVideo'] !== null) {
                $object->setImageToVideo($data['imageToVideo']);
                unset($data['imageToVideo']);
            } elseif (\array_key_exists('imageToVideo', $data) && $data['imageToVideo'] === null) {
                $object->setImageToVideo(null);
            }
            if (\array_key_exists('likeCount', $data)) {
                $object->setLikeCount($data['likeCount']);
                unset($data['likeCount']);
            }
            if (\array_key_exists('motion', $data) && $data['motion'] !== null) {
                $object->setMotion($data['motion']);
                unset($data['motion']);
            } elseif (\array_key_exists('motion', $data) && $data['motion'] === null) {
                $object->setMotion(null);
            }
            if (\array_key_exists('motionModel', $data) && $data['motionModel'] !== null) {
                $object->setMotionModel($data['motionModel']);
                unset($data['motionModel']);
            } elseif (\array_key_exists('motionModel', $data) && $data['motionModel'] === null) {
                $object->setMotionModel(null);
            }
            if (\array_key_exists('motionMP4URL', $data) && $data['motionMP4URL'] !== null) {
                $object->setMotionMP4URL($data['motionMP4URL']);
                unset($data['motionMP4URL']);
            } elseif (\array_key_exists('motionMP4URL', $data) && $data['motionMP4URL'] === null) {
                $object->setMotionMP4URL(null);
            }
            if (\array_key_exists('motionStrength', $data) && $data['motionStrength'] !== null) {
                $object->setMotionStrength($data['motionStrength']);
                unset($data['motionStrength']);
            } elseif (\array_key_exists('motionStrength', $data) && $data['motionStrength'] === null) {
                $object->setMotionStrength(null);
            }
            if (\array_key_exists('nsfw', $data)) {
                $object->setNsfw($data['nsfw']);
                unset($data['nsfw']);
            }
            if (\array_key_exists('url', $data)) {
                $object->setUrl($data['url']);
                unset($data['url']);
            }
            foreach ($data as $key => $value_1) {
                if (preg_match('/.*/', (string) $key)) {
                    $object[$key] = $value_1;
                }
            }

            return $object;
        }

        /**
         * @return array|string|int|float|bool|\ArrayObject|null
         */
        public function normalize($object, $format = null, array $context = [])
        {
            $data = [];
            if ($object->isInitialized('generatedImageVariationGenerics') && null !== $object->getGeneratedImageVariationGenerics()) {
                $values = [];
                foreach ($object->getGeneratedImageVariationGenerics() as $value) {
                    $values[] = $this->normalizer->normalize($value, 'json', $context);
                }
                $data['generated_image_variation_generics'] = $values;
            }
            if ($object->isInitialized('id') && null !== $object->getId()) {
                $data['id'] = $object->getId();
            }
            if ($object->isInitialized('imageToVideo') && null !== $object->getImageToVideo()) {
                $data['imageToVideo'] = $object->getImageToVideo();
            }
            if ($object->isInitialized('likeCount') && null !== $object->getLikeCount()) {
                $data['likeCount'] = $object->getLikeCount();
            }
            if ($object->isInitialized('motion') && null !== $object->getMotion()) {
                $data['motion'] = $object->getMotion();
            }
            if ($object->isInitialized('motionModel') && null !== $object->getMotionModel()) {
                $data['motionModel'] = $object->getMotionModel();
            }
            if ($object->isInitialized('motionMP4URL') && null !== $object->getMotionMP4URL()) {
                $data['motionMP4URL'] = $object->getMotionMP4URL();
            }
            if ($object->isInitialized('motionStrength') && null !== $object->getMotionStrength()) {
                $data['motionStrength'] = $object->getMotionStrength();
            }
            if ($object->isInitialized('nsfw') && null !== $object->getNsfw()) {
                $data['nsfw'] = $object->getNsfw();
            }
            if ($object->isInitialized('url') && null !== $object->getUrl()) {
                $data['url'] = $object->getUrl();
            }
            foreach ($object as $key => $value_1) {
                if (preg_match('/.*/', (string) $key)) {
                    $data[$key] = $value_1;
                }
            }

            return $data;
        }

        public function getSupportedTypes(?string $format = null): array
        {
            return [\CedricZiel\LeonardoAI\Generated\Model\GenerationsUserUserIdGetResponse200GenerationsItemGeneratedImagesItem::class => false];
        }
    }
}
