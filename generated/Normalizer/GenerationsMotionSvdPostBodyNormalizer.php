<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace CedricZiel\LeonardoAI\Generated\Normalizer;

use CedricZiel\LeonardoAI\Generated\Runtime\Normalizer\CheckArray;
use CedricZiel\LeonardoAI\Generated\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\HttpKernel\Kernel;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

if (!class_exists(Kernel::class) or (Kernel::MAJOR_VERSION >= 7 or Kernel::MAJOR_VERSION === 6 and Kernel::MINOR_VERSION === 4)) {
    class GenerationsMotionSvdPostBodyNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
    {
        use DenormalizerAwareTrait;
        use NormalizerAwareTrait;
        use CheckArray;
        use ValidatorTrait;

        public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
        {
            return $type === \CedricZiel\LeonardoAI\Generated\Model\GenerationsMotionSvdPostBody::class;
        }

        public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
        {
            return is_object($data) && get_class($data) === CedricZiel\LeonardoAI\Generated\Model\GenerationsMotionSvdPostBody::class;
        }

        public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
        {
            if (isset($data['$ref'])) {
                return new Reference($data['$ref'], $context['document-origin']);
            }
            if (isset($data['$recursiveRef'])) {
                return new Reference($data['$recursiveRef'], $context['document-origin']);
            }
            $object = new \CedricZiel\LeonardoAI\Generated\Model\GenerationsMotionSvdPostBody();
            if (null === $data || false === \is_array($data)) {
                return $object;
            }
            if (\array_key_exists('imageId', $data)) {
                $object->setImageId($data['imageId']);
                unset($data['imageId']);
            }
            if (\array_key_exists('isPublic', $data) && $data['isPublic'] !== null) {
                $object->setIsPublic($data['isPublic']);
                unset($data['isPublic']);
            } elseif (\array_key_exists('isPublic', $data) && $data['isPublic'] === null) {
                $object->setIsPublic(null);
            }
            if (\array_key_exists('isInitImage', $data) && $data['isInitImage'] !== null) {
                $object->setIsInitImage($data['isInitImage']);
                unset($data['isInitImage']);
            } elseif (\array_key_exists('isInitImage', $data) && $data['isInitImage'] === null) {
                $object->setIsInitImage(null);
            }
            if (\array_key_exists('isVariation', $data) && $data['isVariation'] !== null) {
                $object->setIsVariation($data['isVariation']);
                unset($data['isVariation']);
            } elseif (\array_key_exists('isVariation', $data) && $data['isVariation'] === null) {
                $object->setIsVariation(null);
            }
            if (\array_key_exists('motionStrength', $data) && $data['motionStrength'] !== null) {
                $object->setMotionStrength($data['motionStrength']);
                unset($data['motionStrength']);
            } elseif (\array_key_exists('motionStrength', $data) && $data['motionStrength'] === null) {
                $object->setMotionStrength(null);
            }
            foreach ($data as $key => $value) {
                if (preg_match('/.*/', (string) $key)) {
                    $object[$key] = $value;
                }
            }

            return $object;
        }

        public function normalize(mixed $object, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
        {
            $data = [];
            $data['imageId'] = $object->getImageId();
            if ($object->isInitialized('isPublic') && null !== $object->getIsPublic()) {
                $data['isPublic'] = $object->getIsPublic();
            }
            if ($object->isInitialized('isInitImage') && null !== $object->getIsInitImage()) {
                $data['isInitImage'] = $object->getIsInitImage();
            }
            if ($object->isInitialized('isVariation') && null !== $object->getIsVariation()) {
                $data['isVariation'] = $object->getIsVariation();
            }
            if ($object->isInitialized('motionStrength') && null !== $object->getMotionStrength()) {
                $data['motionStrength'] = $object->getMotionStrength();
            }
            foreach ($object as $key => $value) {
                if (preg_match('/.*/', (string) $key)) {
                    $data[$key] = $value;
                }
            }

            return $data;
        }

        public function getSupportedTypes(?string $format = null): array
        {
            return [\CedricZiel\LeonardoAI\Generated\Model\GenerationsMotionSvdPostBody::class => false];
        }
    }
} else {
    class GenerationsMotionSvdPostBodyNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
    {
        use DenormalizerAwareTrait;
        use NormalizerAwareTrait;
        use CheckArray;
        use ValidatorTrait;

        public function supportsDenormalization($data, $type, ?string $format = null, array $context = []): bool
        {
            return $type === \CedricZiel\LeonardoAI\Generated\Model\GenerationsMotionSvdPostBody::class;
        }

        public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
        {
            return is_object($data) && get_class($data) === CedricZiel\LeonardoAI\Generated\Model\GenerationsMotionSvdPostBody::class;
        }

        public function denormalize($data, $type, $format = null, array $context = [])
        {
            if (isset($data['$ref'])) {
                return new Reference($data['$ref'], $context['document-origin']);
            }
            if (isset($data['$recursiveRef'])) {
                return new Reference($data['$recursiveRef'], $context['document-origin']);
            }
            $object = new \CedricZiel\LeonardoAI\Generated\Model\GenerationsMotionSvdPostBody();
            if (null === $data || false === \is_array($data)) {
                return $object;
            }
            if (\array_key_exists('imageId', $data)) {
                $object->setImageId($data['imageId']);
                unset($data['imageId']);
            }
            if (\array_key_exists('isPublic', $data) && $data['isPublic'] !== null) {
                $object->setIsPublic($data['isPublic']);
                unset($data['isPublic']);
            } elseif (\array_key_exists('isPublic', $data) && $data['isPublic'] === null) {
                $object->setIsPublic(null);
            }
            if (\array_key_exists('isInitImage', $data) && $data['isInitImage'] !== null) {
                $object->setIsInitImage($data['isInitImage']);
                unset($data['isInitImage']);
            } elseif (\array_key_exists('isInitImage', $data) && $data['isInitImage'] === null) {
                $object->setIsInitImage(null);
            }
            if (\array_key_exists('isVariation', $data) && $data['isVariation'] !== null) {
                $object->setIsVariation($data['isVariation']);
                unset($data['isVariation']);
            } elseif (\array_key_exists('isVariation', $data) && $data['isVariation'] === null) {
                $object->setIsVariation(null);
            }
            if (\array_key_exists('motionStrength', $data) && $data['motionStrength'] !== null) {
                $object->setMotionStrength($data['motionStrength']);
                unset($data['motionStrength']);
            } elseif (\array_key_exists('motionStrength', $data) && $data['motionStrength'] === null) {
                $object->setMotionStrength(null);
            }
            foreach ($data as $key => $value) {
                if (preg_match('/.*/', (string) $key)) {
                    $object[$key] = $value;
                }
            }

            return $object;
        }

        /**
         * @return array|string|int|float|bool|\ArrayObject|null
         */
        public function normalize($object, $format = null, array $context = [])
        {
            $data = [];
            $data['imageId'] = $object->getImageId();
            if ($object->isInitialized('isPublic') && null !== $object->getIsPublic()) {
                $data['isPublic'] = $object->getIsPublic();
            }
            if ($object->isInitialized('isInitImage') && null !== $object->getIsInitImage()) {
                $data['isInitImage'] = $object->getIsInitImage();
            }
            if ($object->isInitialized('isVariation') && null !== $object->getIsVariation()) {
                $data['isVariation'] = $object->getIsVariation();
            }
            if ($object->isInitialized('motionStrength') && null !== $object->getMotionStrength()) {
                $data['motionStrength'] = $object->getMotionStrength();
            }
            foreach ($object as $key => $value) {
                if (preg_match('/.*/', (string) $key)) {
                    $data[$key] = $value;
                }
            }

            return $data;
        }

        public function getSupportedTypes(?string $format = null): array
        {
            return [\CedricZiel\LeonardoAI\Generated\Model\GenerationsMotionSvdPostBody::class => false];
        }
    }
}
