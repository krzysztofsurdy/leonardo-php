<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace CedricZiel\LeonardoAI\Generated\Normalizer;

use CedricZiel\LeonardoAI\Generated\Runtime\Normalizer\CheckArray;
use CedricZiel\LeonardoAI\Generated\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\HttpKernel\Kernel;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

if (!class_exists(Kernel::class) or (Kernel::MAJOR_VERSION >= 7 or Kernel::MAJOR_VERSION === 6 and Kernel::MINOR_VERSION === 4)) {
    class PricingCalculatorPostBodyServiceParamsNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
    {
        use DenormalizerAwareTrait;
        use NormalizerAwareTrait;
        use CheckArray;
        use ValidatorTrait;

        public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
        {
            return $type === \CedricZiel\LeonardoAI\Generated\Model\PricingCalculatorPostBodyServiceParams::class;
        }

        public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
        {
            return is_object($data) && get_class($data) === CedricZiel\LeonardoAI\Generated\Model\PricingCalculatorPostBodyServiceParams::class;
        }

        public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
        {
            if (isset($data['$ref'])) {
                return new Reference($data['$ref'], $context['document-origin']);
            }
            if (isset($data['$recursiveRef'])) {
                return new Reference($data['$recursiveRef'], $context['document-origin']);
            }
            $object = new \CedricZiel\LeonardoAI\Generated\Model\PricingCalculatorPostBodyServiceParams();
            if (null === $data || false === \is_array($data)) {
                return $object;
            }
            if (\array_key_exists('IMAGE_GENERATION', $data) && $data['IMAGE_GENERATION'] !== null) {
                $object->setIMAGEGENERATION($this->denormalizer->denormalize($data['IMAGE_GENERATION'], \CedricZiel\LeonardoAI\Generated\Model\PricingCalculatorPostBodyServiceParamsIMAGEGENERATION::class, 'json', $context));
                unset($data['IMAGE_GENERATION']);
            } elseif (\array_key_exists('IMAGE_GENERATION', $data) && $data['IMAGE_GENERATION'] === null) {
                $object->setIMAGEGENERATION(null);
            }
            if (\array_key_exists('FANTASY_AVATAR_GENERATION', $data) && $data['FANTASY_AVATAR_GENERATION'] !== null) {
                $object->setFANTASYAVATARGENERATION($this->denormalizer->denormalize($data['FANTASY_AVATAR_GENERATION'], \CedricZiel\LeonardoAI\Generated\Model\PricingCalculatorPostBodyServiceParamsFANTASYAVATARGENERATION::class, 'json', $context));
                unset($data['FANTASY_AVATAR_GENERATION']);
            } elseif (\array_key_exists('FANTASY_AVATAR_GENERATION', $data) && $data['FANTASY_AVATAR_GENERATION'] === null) {
                $object->setFANTASYAVATARGENERATION(null);
            }
            if (\array_key_exists('MOTION_GENERATION', $data) && $data['MOTION_GENERATION'] !== null) {
                $object->setMOTIONGENERATION($this->denormalizer->denormalize($data['MOTION_GENERATION'], \CedricZiel\LeonardoAI\Generated\Model\PricingCalculatorPostBodyServiceParamsMOTIONGENERATION::class, 'json', $context));
                unset($data['MOTION_GENERATION']);
            } elseif (\array_key_exists('MOTION_GENERATION', $data) && $data['MOTION_GENERATION'] === null) {
                $object->setMOTIONGENERATION(null);
            }
            if (\array_key_exists('LCM_GENERATION', $data) && $data['LCM_GENERATION'] !== null) {
                $object->setLCMGENERATION($this->denormalizer->denormalize($data['LCM_GENERATION'], \CedricZiel\LeonardoAI\Generated\Model\PricingCalculatorPostBodyServiceParamsLCMGENERATION::class, 'json', $context));
                unset($data['LCM_GENERATION']);
            } elseif (\array_key_exists('LCM_GENERATION', $data) && $data['LCM_GENERATION'] === null) {
                $object->setLCMGENERATION(null);
            }
            if (\array_key_exists('MODEL_TRAINING', $data) && $data['MODEL_TRAINING'] !== null) {
                $object->setMODELTRAINING($this->denormalizer->denormalize($data['MODEL_TRAINING'], \CedricZiel\LeonardoAI\Generated\Model\PricingCalculatorPostBodyServiceParamsMODELTRAINING::class, 'json', $context));
                unset($data['MODEL_TRAINING']);
            } elseif (\array_key_exists('MODEL_TRAINING', $data) && $data['MODEL_TRAINING'] === null) {
                $object->setMODELTRAINING(null);
            }
            if (\array_key_exists('TEXTURE_GENERATION', $data) && $data['TEXTURE_GENERATION'] !== null) {
                $object->setTEXTUREGENERATION($this->denormalizer->denormalize($data['TEXTURE_GENERATION'], \CedricZiel\LeonardoAI\Generated\Model\PricingCalculatorPostBodyServiceParamsTEXTUREGENERATION::class, 'json', $context));
                unset($data['TEXTURE_GENERATION']);
            } elseif (\array_key_exists('TEXTURE_GENERATION', $data) && $data['TEXTURE_GENERATION'] === null) {
                $object->setTEXTUREGENERATION(null);
            }
            if (\array_key_exists('UNIVERSAL_UPSCALER', $data) && $data['UNIVERSAL_UPSCALER'] !== null) {
                $object->setUNIVERSALUPSCALER($this->denormalizer->denormalize($data['UNIVERSAL_UPSCALER'], \CedricZiel\LeonardoAI\Generated\Model\PricingCalculatorPostBodyServiceParamsUNIVERSALUPSCALER::class, 'json', $context));
                unset($data['UNIVERSAL_UPSCALER']);
            } elseif (\array_key_exists('UNIVERSAL_UPSCALER', $data) && $data['UNIVERSAL_UPSCALER'] === null) {
                $object->setUNIVERSALUPSCALER(null);
            }
            foreach ($data as $key => $value) {
                if (preg_match('/.*/', (string) $key)) {
                    $object[$key] = $value;
                }
            }

            return $object;
        }

        public function normalize(mixed $object, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
        {
            $data = [];
            if ($object->isInitialized('iMAGEGENERATION') && null !== $object->getIMAGEGENERATION()) {
                $data['IMAGE_GENERATION'] = $this->normalizer->normalize($object->getIMAGEGENERATION(), 'json', $context);
            }
            if ($object->isInitialized('fANTASYAVATARGENERATION') && null !== $object->getFANTASYAVATARGENERATION()) {
                $data['FANTASY_AVATAR_GENERATION'] = $this->normalizer->normalize($object->getFANTASYAVATARGENERATION(), 'json', $context);
            }
            if ($object->isInitialized('mOTIONGENERATION') && null !== $object->getMOTIONGENERATION()) {
                $data['MOTION_GENERATION'] = $this->normalizer->normalize($object->getMOTIONGENERATION(), 'json', $context);
            }
            if ($object->isInitialized('lCMGENERATION') && null !== $object->getLCMGENERATION()) {
                $data['LCM_GENERATION'] = $this->normalizer->normalize($object->getLCMGENERATION(), 'json', $context);
            }
            if ($object->isInitialized('mODELTRAINING') && null !== $object->getMODELTRAINING()) {
                $data['MODEL_TRAINING'] = $this->normalizer->normalize($object->getMODELTRAINING(), 'json', $context);
            }
            if ($object->isInitialized('tEXTUREGENERATION') && null !== $object->getTEXTUREGENERATION()) {
                $data['TEXTURE_GENERATION'] = $this->normalizer->normalize($object->getTEXTUREGENERATION(), 'json', $context);
            }
            if ($object->isInitialized('uNIVERSALUPSCALER') && null !== $object->getUNIVERSALUPSCALER()) {
                $data['UNIVERSAL_UPSCALER'] = $this->normalizer->normalize($object->getUNIVERSALUPSCALER(), 'json', $context);
            }
            foreach ($object as $key => $value) {
                if (preg_match('/.*/', (string) $key)) {
                    $data[$key] = $value;
                }
            }

            return $data;
        }

        public function getSupportedTypes(?string $format = null): array
        {
            return [\CedricZiel\LeonardoAI\Generated\Model\PricingCalculatorPostBodyServiceParams::class => false];
        }
    }
} else {
    class PricingCalculatorPostBodyServiceParamsNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
    {
        use DenormalizerAwareTrait;
        use NormalizerAwareTrait;
        use CheckArray;
        use ValidatorTrait;

        public function supportsDenormalization($data, $type, ?string $format = null, array $context = []): bool
        {
            return $type === \CedricZiel\LeonardoAI\Generated\Model\PricingCalculatorPostBodyServiceParams::class;
        }

        public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
        {
            return is_object($data) && get_class($data) === CedricZiel\LeonardoAI\Generated\Model\PricingCalculatorPostBodyServiceParams::class;
        }

        public function denormalize($data, $type, $format = null, array $context = [])
        {
            if (isset($data['$ref'])) {
                return new Reference($data['$ref'], $context['document-origin']);
            }
            if (isset($data['$recursiveRef'])) {
                return new Reference($data['$recursiveRef'], $context['document-origin']);
            }
            $object = new \CedricZiel\LeonardoAI\Generated\Model\PricingCalculatorPostBodyServiceParams();
            if (null === $data || false === \is_array($data)) {
                return $object;
            }
            if (\array_key_exists('IMAGE_GENERATION', $data) && $data['IMAGE_GENERATION'] !== null) {
                $object->setIMAGEGENERATION($this->denormalizer->denormalize($data['IMAGE_GENERATION'], \CedricZiel\LeonardoAI\Generated\Model\PricingCalculatorPostBodyServiceParamsIMAGEGENERATION::class, 'json', $context));
                unset($data['IMAGE_GENERATION']);
            } elseif (\array_key_exists('IMAGE_GENERATION', $data) && $data['IMAGE_GENERATION'] === null) {
                $object->setIMAGEGENERATION(null);
            }
            if (\array_key_exists('FANTASY_AVATAR_GENERATION', $data) && $data['FANTASY_AVATAR_GENERATION'] !== null) {
                $object->setFANTASYAVATARGENERATION($this->denormalizer->denormalize($data['FANTASY_AVATAR_GENERATION'], \CedricZiel\LeonardoAI\Generated\Model\PricingCalculatorPostBodyServiceParamsFANTASYAVATARGENERATION::class, 'json', $context));
                unset($data['FANTASY_AVATAR_GENERATION']);
            } elseif (\array_key_exists('FANTASY_AVATAR_GENERATION', $data) && $data['FANTASY_AVATAR_GENERATION'] === null) {
                $object->setFANTASYAVATARGENERATION(null);
            }
            if (\array_key_exists('MOTION_GENERATION', $data) && $data['MOTION_GENERATION'] !== null) {
                $object->setMOTIONGENERATION($this->denormalizer->denormalize($data['MOTION_GENERATION'], \CedricZiel\LeonardoAI\Generated\Model\PricingCalculatorPostBodyServiceParamsMOTIONGENERATION::class, 'json', $context));
                unset($data['MOTION_GENERATION']);
            } elseif (\array_key_exists('MOTION_GENERATION', $data) && $data['MOTION_GENERATION'] === null) {
                $object->setMOTIONGENERATION(null);
            }
            if (\array_key_exists('LCM_GENERATION', $data) && $data['LCM_GENERATION'] !== null) {
                $object->setLCMGENERATION($this->denormalizer->denormalize($data['LCM_GENERATION'], \CedricZiel\LeonardoAI\Generated\Model\PricingCalculatorPostBodyServiceParamsLCMGENERATION::class, 'json', $context));
                unset($data['LCM_GENERATION']);
            } elseif (\array_key_exists('LCM_GENERATION', $data) && $data['LCM_GENERATION'] === null) {
                $object->setLCMGENERATION(null);
            }
            if (\array_key_exists('MODEL_TRAINING', $data) && $data['MODEL_TRAINING'] !== null) {
                $object->setMODELTRAINING($this->denormalizer->denormalize($data['MODEL_TRAINING'], \CedricZiel\LeonardoAI\Generated\Model\PricingCalculatorPostBodyServiceParamsMODELTRAINING::class, 'json', $context));
                unset($data['MODEL_TRAINING']);
            } elseif (\array_key_exists('MODEL_TRAINING', $data) && $data['MODEL_TRAINING'] === null) {
                $object->setMODELTRAINING(null);
            }
            if (\array_key_exists('TEXTURE_GENERATION', $data) && $data['TEXTURE_GENERATION'] !== null) {
                $object->setTEXTUREGENERATION($this->denormalizer->denormalize($data['TEXTURE_GENERATION'], \CedricZiel\LeonardoAI\Generated\Model\PricingCalculatorPostBodyServiceParamsTEXTUREGENERATION::class, 'json', $context));
                unset($data['TEXTURE_GENERATION']);
            } elseif (\array_key_exists('TEXTURE_GENERATION', $data) && $data['TEXTURE_GENERATION'] === null) {
                $object->setTEXTUREGENERATION(null);
            }
            if (\array_key_exists('UNIVERSAL_UPSCALER', $data) && $data['UNIVERSAL_UPSCALER'] !== null) {
                $object->setUNIVERSALUPSCALER($this->denormalizer->denormalize($data['UNIVERSAL_UPSCALER'], \CedricZiel\LeonardoAI\Generated\Model\PricingCalculatorPostBodyServiceParamsUNIVERSALUPSCALER::class, 'json', $context));
                unset($data['UNIVERSAL_UPSCALER']);
            } elseif (\array_key_exists('UNIVERSAL_UPSCALER', $data) && $data['UNIVERSAL_UPSCALER'] === null) {
                $object->setUNIVERSALUPSCALER(null);
            }
            foreach ($data as $key => $value) {
                if (preg_match('/.*/', (string) $key)) {
                    $object[$key] = $value;
                }
            }

            return $object;
        }

        /**
         * @return array|string|int|float|bool|\ArrayObject|null
         */
        public function normalize($object, $format = null, array $context = [])
        {
            $data = [];
            if ($object->isInitialized('iMAGEGENERATION') && null !== $object->getIMAGEGENERATION()) {
                $data['IMAGE_GENERATION'] = $this->normalizer->normalize($object->getIMAGEGENERATION(), 'json', $context);
            }
            if ($object->isInitialized('fANTASYAVATARGENERATION') && null !== $object->getFANTASYAVATARGENERATION()) {
                $data['FANTASY_AVATAR_GENERATION'] = $this->normalizer->normalize($object->getFANTASYAVATARGENERATION(), 'json', $context);
            }
            if ($object->isInitialized('mOTIONGENERATION') && null !== $object->getMOTIONGENERATION()) {
                $data['MOTION_GENERATION'] = $this->normalizer->normalize($object->getMOTIONGENERATION(), 'json', $context);
            }
            if ($object->isInitialized('lCMGENERATION') && null !== $object->getLCMGENERATION()) {
                $data['LCM_GENERATION'] = $this->normalizer->normalize($object->getLCMGENERATION(), 'json', $context);
            }
            if ($object->isInitialized('mODELTRAINING') && null !== $object->getMODELTRAINING()) {
                $data['MODEL_TRAINING'] = $this->normalizer->normalize($object->getMODELTRAINING(), 'json', $context);
            }
            if ($object->isInitialized('tEXTUREGENERATION') && null !== $object->getTEXTUREGENERATION()) {
                $data['TEXTURE_GENERATION'] = $this->normalizer->normalize($object->getTEXTUREGENERATION(), 'json', $context);
            }
            if ($object->isInitialized('uNIVERSALUPSCALER') && null !== $object->getUNIVERSALUPSCALER()) {
                $data['UNIVERSAL_UPSCALER'] = $this->normalizer->normalize($object->getUNIVERSALUPSCALER(), 'json', $context);
            }
            foreach ($object as $key => $value) {
                if (preg_match('/.*/', (string) $key)) {
                    $data[$key] = $value;
                }
            }

            return $data;
        }

        public function getSupportedTypes(?string $format = null): array
        {
            return [\CedricZiel\LeonardoAI\Generated\Model\PricingCalculatorPostBodyServiceParams::class => false];
        }
    }
}
