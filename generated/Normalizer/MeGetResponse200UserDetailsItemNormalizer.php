<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace CedricZiel\LeonardoAI\Generated\Normalizer;

use CedricZiel\LeonardoAI\Generated\Runtime\Normalizer\CheckArray;
use CedricZiel\LeonardoAI\Generated\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\HttpKernel\Kernel;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

if (!class_exists(Kernel::class) or (Kernel::MAJOR_VERSION >= 7 or Kernel::MAJOR_VERSION === 6 and Kernel::MINOR_VERSION === 4)) {
    class MeGetResponse200UserDetailsItemNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
    {
        use DenormalizerAwareTrait;
        use NormalizerAwareTrait;
        use CheckArray;
        use ValidatorTrait;

        public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
        {
            return $type === \CedricZiel\LeonardoAI\Generated\Model\MeGetResponse200UserDetailsItem::class;
        }

        public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
        {
            return is_object($data) && get_class($data) === CedricZiel\LeonardoAI\Generated\Model\MeGetResponse200UserDetailsItem::class;
        }

        public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
        {
            if (isset($data['$ref'])) {
                return new Reference($data['$ref'], $context['document-origin']);
            }
            if (isset($data['$recursiveRef'])) {
                return new Reference($data['$recursiveRef'], $context['document-origin']);
            }
            $object = new \CedricZiel\LeonardoAI\Generated\Model\MeGetResponse200UserDetailsItem();
            if (null === $data || false === \is_array($data)) {
                return $object;
            }
            if (\array_key_exists('user', $data) && $data['user'] !== null) {
                $object->setUser($this->denormalizer->denormalize($data['user'], \CedricZiel\LeonardoAI\Generated\Model\MeGetResponse200UserDetailsItemUser::class, 'json', $context));
                unset($data['user']);
            } elseif (\array_key_exists('user', $data) && $data['user'] === null) {
                $object->setUser(null);
            }
            if (\array_key_exists('tokenRenewalDate', $data) && $data['tokenRenewalDate'] !== null) {
                $object->setTokenRenewalDate($data['tokenRenewalDate']);
                unset($data['tokenRenewalDate']);
            } elseif (\array_key_exists('tokenRenewalDate', $data) && $data['tokenRenewalDate'] === null) {
                $object->setTokenRenewalDate(null);
            }
            if (\array_key_exists('paidTokens', $data) && $data['paidTokens'] !== null) {
                $object->setPaidTokens($data['paidTokens']);
                unset($data['paidTokens']);
            } elseif (\array_key_exists('paidTokens', $data) && $data['paidTokens'] === null) {
                $object->setPaidTokens(null);
            }
            if (\array_key_exists('subscriptionTokens', $data)) {
                $object->setSubscriptionTokens($data['subscriptionTokens']);
                unset($data['subscriptionTokens']);
            }
            if (\array_key_exists('subscriptionGptTokens', $data)) {
                $object->setSubscriptionGptTokens($data['subscriptionGptTokens']);
                unset($data['subscriptionGptTokens']);
            }
            if (\array_key_exists('subscriptionModelTokens', $data)) {
                $object->setSubscriptionModelTokens($data['subscriptionModelTokens']);
                unset($data['subscriptionModelTokens']);
            }
            if (\array_key_exists('apiConcurrencySlots', $data)) {
                $object->setApiConcurrencySlots($data['apiConcurrencySlots']);
                unset($data['apiConcurrencySlots']);
            }
            if (\array_key_exists('apiPaidTokens', $data) && $data['apiPaidTokens'] !== null) {
                $object->setApiPaidTokens($data['apiPaidTokens']);
                unset($data['apiPaidTokens']);
            } elseif (\array_key_exists('apiPaidTokens', $data) && $data['apiPaidTokens'] === null) {
                $object->setApiPaidTokens(null);
            }
            if (\array_key_exists('apiSubscriptionTokens', $data)) {
                $object->setApiSubscriptionTokens($data['apiSubscriptionTokens']);
                unset($data['apiSubscriptionTokens']);
            }
            if (\array_key_exists('apiPlanTokenRenewalDate', $data) && $data['apiPlanTokenRenewalDate'] !== null) {
                $object->setApiPlanTokenRenewalDate($data['apiPlanTokenRenewalDate']);
                unset($data['apiPlanTokenRenewalDate']);
            } elseif (\array_key_exists('apiPlanTokenRenewalDate', $data) && $data['apiPlanTokenRenewalDate'] === null) {
                $object->setApiPlanTokenRenewalDate(null);
            }
            foreach ($data as $key => $value) {
                if (preg_match('/.*/', (string) $key)) {
                    $object[$key] = $value;
                }
            }

            return $object;
        }

        public function normalize(mixed $object, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
        {
            $data = [];
            if ($object->isInitialized('user') && null !== $object->getUser()) {
                $data['user'] = $this->normalizer->normalize($object->getUser(), 'json', $context);
            }
            if ($object->isInitialized('tokenRenewalDate') && null !== $object->getTokenRenewalDate()) {
                $data['tokenRenewalDate'] = $object->getTokenRenewalDate();
            }
            if ($object->isInitialized('paidTokens') && null !== $object->getPaidTokens()) {
                $data['paidTokens'] = $object->getPaidTokens();
            }
            if ($object->isInitialized('subscriptionTokens') && null !== $object->getSubscriptionTokens()) {
                $data['subscriptionTokens'] = $object->getSubscriptionTokens();
            }
            if ($object->isInitialized('subscriptionGptTokens') && null !== $object->getSubscriptionGptTokens()) {
                $data['subscriptionGptTokens'] = $object->getSubscriptionGptTokens();
            }
            if ($object->isInitialized('subscriptionModelTokens') && null !== $object->getSubscriptionModelTokens()) {
                $data['subscriptionModelTokens'] = $object->getSubscriptionModelTokens();
            }
            if ($object->isInitialized('apiConcurrencySlots') && null !== $object->getApiConcurrencySlots()) {
                $data['apiConcurrencySlots'] = $object->getApiConcurrencySlots();
            }
            if ($object->isInitialized('apiPaidTokens') && null !== $object->getApiPaidTokens()) {
                $data['apiPaidTokens'] = $object->getApiPaidTokens();
            }
            if ($object->isInitialized('apiSubscriptionTokens') && null !== $object->getApiSubscriptionTokens()) {
                $data['apiSubscriptionTokens'] = $object->getApiSubscriptionTokens();
            }
            if ($object->isInitialized('apiPlanTokenRenewalDate') && null !== $object->getApiPlanTokenRenewalDate()) {
                $data['apiPlanTokenRenewalDate'] = $object->getApiPlanTokenRenewalDate();
            }
            foreach ($object as $key => $value) {
                if (preg_match('/.*/', (string) $key)) {
                    $data[$key] = $value;
                }
            }

            return $data;
        }

        public function getSupportedTypes(?string $format = null): array
        {
            return [\CedricZiel\LeonardoAI\Generated\Model\MeGetResponse200UserDetailsItem::class => false];
        }
    }
} else {
    class MeGetResponse200UserDetailsItemNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
    {
        use DenormalizerAwareTrait;
        use NormalizerAwareTrait;
        use CheckArray;
        use ValidatorTrait;

        public function supportsDenormalization($data, $type, ?string $format = null, array $context = []): bool
        {
            return $type === \CedricZiel\LeonardoAI\Generated\Model\MeGetResponse200UserDetailsItem::class;
        }

        public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
        {
            return is_object($data) && get_class($data) === CedricZiel\LeonardoAI\Generated\Model\MeGetResponse200UserDetailsItem::class;
        }

        public function denormalize($data, $type, $format = null, array $context = [])
        {
            if (isset($data['$ref'])) {
                return new Reference($data['$ref'], $context['document-origin']);
            }
            if (isset($data['$recursiveRef'])) {
                return new Reference($data['$recursiveRef'], $context['document-origin']);
            }
            $object = new \CedricZiel\LeonardoAI\Generated\Model\MeGetResponse200UserDetailsItem();
            if (null === $data || false === \is_array($data)) {
                return $object;
            }
            if (\array_key_exists('user', $data) && $data['user'] !== null) {
                $object->setUser($this->denormalizer->denormalize($data['user'], \CedricZiel\LeonardoAI\Generated\Model\MeGetResponse200UserDetailsItemUser::class, 'json', $context));
                unset($data['user']);
            } elseif (\array_key_exists('user', $data) && $data['user'] === null) {
                $object->setUser(null);
            }
            if (\array_key_exists('tokenRenewalDate', $data) && $data['tokenRenewalDate'] !== null) {
                $object->setTokenRenewalDate($data['tokenRenewalDate']);
                unset($data['tokenRenewalDate']);
            } elseif (\array_key_exists('tokenRenewalDate', $data) && $data['tokenRenewalDate'] === null) {
                $object->setTokenRenewalDate(null);
            }
            if (\array_key_exists('paidTokens', $data) && $data['paidTokens'] !== null) {
                $object->setPaidTokens($data['paidTokens']);
                unset($data['paidTokens']);
            } elseif (\array_key_exists('paidTokens', $data) && $data['paidTokens'] === null) {
                $object->setPaidTokens(null);
            }
            if (\array_key_exists('subscriptionTokens', $data)) {
                $object->setSubscriptionTokens($data['subscriptionTokens']);
                unset($data['subscriptionTokens']);
            }
            if (\array_key_exists('subscriptionGptTokens', $data)) {
                $object->setSubscriptionGptTokens($data['subscriptionGptTokens']);
                unset($data['subscriptionGptTokens']);
            }
            if (\array_key_exists('subscriptionModelTokens', $data)) {
                $object->setSubscriptionModelTokens($data['subscriptionModelTokens']);
                unset($data['subscriptionModelTokens']);
            }
            if (\array_key_exists('apiConcurrencySlots', $data)) {
                $object->setApiConcurrencySlots($data['apiConcurrencySlots']);
                unset($data['apiConcurrencySlots']);
            }
            if (\array_key_exists('apiPaidTokens', $data) && $data['apiPaidTokens'] !== null) {
                $object->setApiPaidTokens($data['apiPaidTokens']);
                unset($data['apiPaidTokens']);
            } elseif (\array_key_exists('apiPaidTokens', $data) && $data['apiPaidTokens'] === null) {
                $object->setApiPaidTokens(null);
            }
            if (\array_key_exists('apiSubscriptionTokens', $data)) {
                $object->setApiSubscriptionTokens($data['apiSubscriptionTokens']);
                unset($data['apiSubscriptionTokens']);
            }
            if (\array_key_exists('apiPlanTokenRenewalDate', $data) && $data['apiPlanTokenRenewalDate'] !== null) {
                $object->setApiPlanTokenRenewalDate($data['apiPlanTokenRenewalDate']);
                unset($data['apiPlanTokenRenewalDate']);
            } elseif (\array_key_exists('apiPlanTokenRenewalDate', $data) && $data['apiPlanTokenRenewalDate'] === null) {
                $object->setApiPlanTokenRenewalDate(null);
            }
            foreach ($data as $key => $value) {
                if (preg_match('/.*/', (string) $key)) {
                    $object[$key] = $value;
                }
            }

            return $object;
        }

        /**
         * @return array|string|int|float|bool|\ArrayObject|null
         */
        public function normalize($object, $format = null, array $context = [])
        {
            $data = [];
            if ($object->isInitialized('user') && null !== $object->getUser()) {
                $data['user'] = $this->normalizer->normalize($object->getUser(), 'json', $context);
            }
            if ($object->isInitialized('tokenRenewalDate') && null !== $object->getTokenRenewalDate()) {
                $data['tokenRenewalDate'] = $object->getTokenRenewalDate();
            }
            if ($object->isInitialized('paidTokens') && null !== $object->getPaidTokens()) {
                $data['paidTokens'] = $object->getPaidTokens();
            }
            if ($object->isInitialized('subscriptionTokens') && null !== $object->getSubscriptionTokens()) {
                $data['subscriptionTokens'] = $object->getSubscriptionTokens();
            }
            if ($object->isInitialized('subscriptionGptTokens') && null !== $object->getSubscriptionGptTokens()) {
                $data['subscriptionGptTokens'] = $object->getSubscriptionGptTokens();
            }
            if ($object->isInitialized('subscriptionModelTokens') && null !== $object->getSubscriptionModelTokens()) {
                $data['subscriptionModelTokens'] = $object->getSubscriptionModelTokens();
            }
            if ($object->isInitialized('apiConcurrencySlots') && null !== $object->getApiConcurrencySlots()) {
                $data['apiConcurrencySlots'] = $object->getApiConcurrencySlots();
            }
            if ($object->isInitialized('apiPaidTokens') && null !== $object->getApiPaidTokens()) {
                $data['apiPaidTokens'] = $object->getApiPaidTokens();
            }
            if ($object->isInitialized('apiSubscriptionTokens') && null !== $object->getApiSubscriptionTokens()) {
                $data['apiSubscriptionTokens'] = $object->getApiSubscriptionTokens();
            }
            if ($object->isInitialized('apiPlanTokenRenewalDate') && null !== $object->getApiPlanTokenRenewalDate()) {
                $data['apiPlanTokenRenewalDate'] = $object->getApiPlanTokenRenewalDate();
            }
            foreach ($object as $key => $value) {
                if (preg_match('/.*/', (string) $key)) {
                    $data[$key] = $value;
                }
            }

            return $data;
        }

        public function getSupportedTypes(?string $format = null): array
        {
            return [\CedricZiel\LeonardoAI\Generated\Model\MeGetResponse200UserDetailsItem::class => false];
        }
    }
}
