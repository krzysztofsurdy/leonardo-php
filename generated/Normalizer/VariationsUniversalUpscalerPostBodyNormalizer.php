<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace CedricZiel\LeonardoAI\Generated\Normalizer;

use CedricZiel\LeonardoAI\Generated\Runtime\Normalizer\CheckArray;
use CedricZiel\LeonardoAI\Generated\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\HttpKernel\Kernel;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

if (!class_exists(Kernel::class) or (Kernel::MAJOR_VERSION >= 7 or Kernel::MAJOR_VERSION === 6 and Kernel::MINOR_VERSION === 4)) {
    class VariationsUniversalUpscalerPostBodyNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
    {
        use DenormalizerAwareTrait;
        use NormalizerAwareTrait;
        use CheckArray;
        use ValidatorTrait;

        public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
        {
            return $type === \CedricZiel\LeonardoAI\Generated\Model\VariationsUniversalUpscalerPostBody::class;
        }

        public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
        {
            return is_object($data) && get_class($data) === CedricZiel\LeonardoAI\Generated\Model\VariationsUniversalUpscalerPostBody::class;
        }

        public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
        {
            if (isset($data['$ref'])) {
                return new Reference($data['$ref'], $context['document-origin']);
            }
            if (isset($data['$recursiveRef'])) {
                return new Reference($data['$recursiveRef'], $context['document-origin']);
            }
            $object = new \CedricZiel\LeonardoAI\Generated\Model\VariationsUniversalUpscalerPostBody();
            if (\array_key_exists('upscaleMultiplier', $data) && \is_int($data['upscaleMultiplier'])) {
                $data['upscaleMultiplier'] = (float) $data['upscaleMultiplier'];
            }
            if (null === $data || false === \is_array($data)) {
                return $object;
            }
            if (\array_key_exists('initImageId', $data) && $data['initImageId'] !== null) {
                $object->setInitImageId($data['initImageId']);
                unset($data['initImageId']);
            } elseif (\array_key_exists('initImageId', $data) && $data['initImageId'] === null) {
                $object->setInitImageId(null);
            }
            if (\array_key_exists('generatedImageId', $data) && $data['generatedImageId'] !== null) {
                $object->setGeneratedImageId($data['generatedImageId']);
                unset($data['generatedImageId']);
            } elseif (\array_key_exists('generatedImageId', $data) && $data['generatedImageId'] === null) {
                $object->setGeneratedImageId(null);
            }
            if (\array_key_exists('variationId', $data) && $data['variationId'] !== null) {
                $object->setVariationId($data['variationId']);
                unset($data['variationId']);
            } elseif (\array_key_exists('variationId', $data) && $data['variationId'] === null) {
                $object->setVariationId(null);
            }
            if (\array_key_exists('upscalerStyle', $data) && $data['upscalerStyle'] !== null) {
                $object->setUpscalerStyle($data['upscalerStyle']);
                unset($data['upscalerStyle']);
            } elseif (\array_key_exists('upscalerStyle', $data) && $data['upscalerStyle'] === null) {
                $object->setUpscalerStyle(null);
            }
            if (\array_key_exists('creativityStrength', $data) && $data['creativityStrength'] !== null) {
                $object->setCreativityStrength($data['creativityStrength']);
                unset($data['creativityStrength']);
            } elseif (\array_key_exists('creativityStrength', $data) && $data['creativityStrength'] === null) {
                $object->setCreativityStrength(null);
            }
            if (\array_key_exists('upscaleMultiplier', $data) && $data['upscaleMultiplier'] !== null) {
                $object->setUpscaleMultiplier($data['upscaleMultiplier']);
                unset($data['upscaleMultiplier']);
            } elseif (\array_key_exists('upscaleMultiplier', $data) && $data['upscaleMultiplier'] === null) {
                $object->setUpscaleMultiplier(null);
            }
            if (\array_key_exists('prompt', $data) && $data['prompt'] !== null) {
                $object->setPrompt($data['prompt']);
                unset($data['prompt']);
            } elseif (\array_key_exists('prompt', $data) && $data['prompt'] === null) {
                $object->setPrompt(null);
            }
            foreach ($data as $key => $value) {
                if (preg_match('/.*/', (string) $key)) {
                    $object[$key] = $value;
                }
            }

            return $object;
        }

        public function normalize(mixed $object, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
        {
            $data = [];
            if ($object->isInitialized('initImageId') && null !== $object->getInitImageId()) {
                $data['initImageId'] = $object->getInitImageId();
            }
            if ($object->isInitialized('generatedImageId') && null !== $object->getGeneratedImageId()) {
                $data['generatedImageId'] = $object->getGeneratedImageId();
            }
            if ($object->isInitialized('variationId') && null !== $object->getVariationId()) {
                $data['variationId'] = $object->getVariationId();
            }
            if ($object->isInitialized('upscalerStyle') && null !== $object->getUpscalerStyle()) {
                $data['upscalerStyle'] = $object->getUpscalerStyle();
            }
            if ($object->isInitialized('creativityStrength') && null !== $object->getCreativityStrength()) {
                $data['creativityStrength'] = $object->getCreativityStrength();
            }
            if ($object->isInitialized('upscaleMultiplier') && null !== $object->getUpscaleMultiplier()) {
                $data['upscaleMultiplier'] = $object->getUpscaleMultiplier();
            }
            if ($object->isInitialized('prompt') && null !== $object->getPrompt()) {
                $data['prompt'] = $object->getPrompt();
            }
            foreach ($object as $key => $value) {
                if (preg_match('/.*/', (string) $key)) {
                    $data[$key] = $value;
                }
            }

            return $data;
        }

        public function getSupportedTypes(?string $format = null): array
        {
            return [\CedricZiel\LeonardoAI\Generated\Model\VariationsUniversalUpscalerPostBody::class => false];
        }
    }
} else {
    class VariationsUniversalUpscalerPostBodyNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
    {
        use DenormalizerAwareTrait;
        use NormalizerAwareTrait;
        use CheckArray;
        use ValidatorTrait;

        public function supportsDenormalization($data, $type, ?string $format = null, array $context = []): bool
        {
            return $type === \CedricZiel\LeonardoAI\Generated\Model\VariationsUniversalUpscalerPostBody::class;
        }

        public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
        {
            return is_object($data) && get_class($data) === CedricZiel\LeonardoAI\Generated\Model\VariationsUniversalUpscalerPostBody::class;
        }

        public function denormalize($data, $type, $format = null, array $context = [])
        {
            if (isset($data['$ref'])) {
                return new Reference($data['$ref'], $context['document-origin']);
            }
            if (isset($data['$recursiveRef'])) {
                return new Reference($data['$recursiveRef'], $context['document-origin']);
            }
            $object = new \CedricZiel\LeonardoAI\Generated\Model\VariationsUniversalUpscalerPostBody();
            if (\array_key_exists('upscaleMultiplier', $data) && \is_int($data['upscaleMultiplier'])) {
                $data['upscaleMultiplier'] = (float) $data['upscaleMultiplier'];
            }
            if (null === $data || false === \is_array($data)) {
                return $object;
            }
            if (\array_key_exists('initImageId', $data) && $data['initImageId'] !== null) {
                $object->setInitImageId($data['initImageId']);
                unset($data['initImageId']);
            } elseif (\array_key_exists('initImageId', $data) && $data['initImageId'] === null) {
                $object->setInitImageId(null);
            }
            if (\array_key_exists('generatedImageId', $data) && $data['generatedImageId'] !== null) {
                $object->setGeneratedImageId($data['generatedImageId']);
                unset($data['generatedImageId']);
            } elseif (\array_key_exists('generatedImageId', $data) && $data['generatedImageId'] === null) {
                $object->setGeneratedImageId(null);
            }
            if (\array_key_exists('variationId', $data) && $data['variationId'] !== null) {
                $object->setVariationId($data['variationId']);
                unset($data['variationId']);
            } elseif (\array_key_exists('variationId', $data) && $data['variationId'] === null) {
                $object->setVariationId(null);
            }
            if (\array_key_exists('upscalerStyle', $data) && $data['upscalerStyle'] !== null) {
                $object->setUpscalerStyle($data['upscalerStyle']);
                unset($data['upscalerStyle']);
            } elseif (\array_key_exists('upscalerStyle', $data) && $data['upscalerStyle'] === null) {
                $object->setUpscalerStyle(null);
            }
            if (\array_key_exists('creativityStrength', $data) && $data['creativityStrength'] !== null) {
                $object->setCreativityStrength($data['creativityStrength']);
                unset($data['creativityStrength']);
            } elseif (\array_key_exists('creativityStrength', $data) && $data['creativityStrength'] === null) {
                $object->setCreativityStrength(null);
            }
            if (\array_key_exists('upscaleMultiplier', $data) && $data['upscaleMultiplier'] !== null) {
                $object->setUpscaleMultiplier($data['upscaleMultiplier']);
                unset($data['upscaleMultiplier']);
            } elseif (\array_key_exists('upscaleMultiplier', $data) && $data['upscaleMultiplier'] === null) {
                $object->setUpscaleMultiplier(null);
            }
            if (\array_key_exists('prompt', $data) && $data['prompt'] !== null) {
                $object->setPrompt($data['prompt']);
                unset($data['prompt']);
            } elseif (\array_key_exists('prompt', $data) && $data['prompt'] === null) {
                $object->setPrompt(null);
            }
            foreach ($data as $key => $value) {
                if (preg_match('/.*/', (string) $key)) {
                    $object[$key] = $value;
                }
            }

            return $object;
        }

        /**
         * @return array|string|int|float|bool|\ArrayObject|null
         */
        public function normalize($object, $format = null, array $context = [])
        {
            $data = [];
            if ($object->isInitialized('initImageId') && null !== $object->getInitImageId()) {
                $data['initImageId'] = $object->getInitImageId();
            }
            if ($object->isInitialized('generatedImageId') && null !== $object->getGeneratedImageId()) {
                $data['generatedImageId'] = $object->getGeneratedImageId();
            }
            if ($object->isInitialized('variationId') && null !== $object->getVariationId()) {
                $data['variationId'] = $object->getVariationId();
            }
            if ($object->isInitialized('upscalerStyle') && null !== $object->getUpscalerStyle()) {
                $data['upscalerStyle'] = $object->getUpscalerStyle();
            }
            if ($object->isInitialized('creativityStrength') && null !== $object->getCreativityStrength()) {
                $data['creativityStrength'] = $object->getCreativityStrength();
            }
            if ($object->isInitialized('upscaleMultiplier') && null !== $object->getUpscaleMultiplier()) {
                $data['upscaleMultiplier'] = $object->getUpscaleMultiplier();
            }
            if ($object->isInitialized('prompt') && null !== $object->getPrompt()) {
                $data['prompt'] = $object->getPrompt();
            }
            foreach ($object as $key => $value) {
                if (preg_match('/.*/', (string) $key)) {
                    $data[$key] = $value;
                }
            }

            return $data;
        }

        public function getSupportedTypes(?string $format = null): array
        {
            return [\CedricZiel\LeonardoAI\Generated\Model\VariationsUniversalUpscalerPostBody::class => false];
        }
    }
}
