<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace CedricZiel\LeonardoAI\Generated;

class Client extends Runtime\Client\Client
{
    /**
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\MeGetResponse200|\Psr\Http\Message\ResponseInterface|null
     */
    public function getUserSelf(string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\GetUserSelf(), $fetch);
    }

    /**
     * This endpoint will generate images.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\GenerationsPostResponse200|\Psr\Http\Message\ResponseInterface|null
     */
    public function createGeneration(Model\GenerationsPostBody $requestBody, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\CreateGeneration($requestBody), $fetch);
    }

    /**
     * This endpoint deletes a specific generation.
     *
     * @param string $id    the ID of the generation to delete
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\GenerationsIdDeleteResponse200|\Psr\Http\Message\ResponseInterface|null
     */
    public function deleteGenerationById(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\DeleteGenerationById($id), $fetch);
    }

    /**
     * This endpoint will provide information about a specific generation.
     *
     * @param string $id    the ID of the generation to return
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\GenerationsIdGetResponse200|\Psr\Http\Message\ResponseInterface|null
     */
    public function getGenerationById(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\GetGenerationById($id), $fetch);
    }

    /**
     * This endpoint returns all generations by a specific user.
     *
     * @param array $queryParameters {
     *
     * @var int $offset
     * @var int $limit
     *          }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\GenerationsUserUserIdGetResponse200|\Psr\Http\Message\ResponseInterface|null
     */
    public function getGenerationsByUserId(string $userId, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\GetGenerationsByUserId($userId, $queryParameters), $fetch);
    }

    /**
     * This endpoint will generate a texture generation.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\GenerationsTexturePostResponse200|\Psr\Http\Message\ResponseInterface|null
     */
    public function createTextureGeneration(?Model\GenerationsTexturePostBody $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\CreateTextureGeneration($requestBody), $fetch);
    }

    /**
     * This endpoint will generate a SVD motion generation.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\GenerationsMotionSvdPostResponse200|\Psr\Http\Message\ResponseInterface|null
     */
    public function createSVDMotionGeneration(?Model\GenerationsMotionSvdPostBody $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\CreateSVDMotionGeneration($requestBody), $fetch);
    }

    /**
     * This endpoint will generate a LCM image generation.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\GenerationsLcmPostResponse200|\Psr\Http\Message\ResponseInterface|null
     */
    public function createLCMGeneration(?Model\GenerationsLcmPostBody $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\CreateLCMGeneration($requestBody), $fetch);
    }

    /**
     * This endpoint will perform instant refine on a LCM image.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\LcmInstantRefinePostResponse200|\Psr\Http\Message\ResponseInterface|null
     */
    public function performInstantRefine(?Model\LcmInstantRefinePostBody $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\PerformInstantRefine($requestBody), $fetch);
    }

    /**
     * This endpoint will perform a inpainting on a LCM image.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\LcmInpaintingPostResponse200|\Psr\Http\Message\ResponseInterface|null
     */
    public function performInpaintingLCM(?Model\LcmInpaintingPostBody $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\PerformInpaintingLCM($requestBody), $fetch);
    }

    /**
     * This endpoint will perform Alchemy Upscale on a LCM image.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\LcmUpscalePostResponse200|\Psr\Http\Message\ResponseInterface|null
     */
    public function performAlchemyUpscaleLCM(?Model\LcmUpscalePostBody $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\PerformAlchemyUpscaleLCM($requestBody), $fetch);
    }

    /**
     * This endpoint gets the specific texture generations by the 3d model id.
     *
     * @param string $modelId         _"modelId" is required (enter it either in parameters or request body)_
     * @param array  $queryParameters {
     *
     * @var int $offset
     * @var int $limit
     *          }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\GenerationsTextureModelModelIdGetResponse200|\Psr\Http\Message\ResponseInterface|null
     */
    public function getTextureGenerationsByModelId(string $modelId, ?Model\GenerationsTextureModelModelIdGetBody $requestBody = null, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\GetTextureGenerationsByModelId($modelId, $requestBody, $queryParameters), $fetch);
    }

    /**
     * This endpoint deletes the specific texture generation.
     *
     * @param string $id    _"id" is required (enter it either in parameters or request body)_
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\GenerationsTextureIdDeleteResponse200|\Psr\Http\Message\ResponseInterface|null
     */
    public function deleteTextureGenerationById(string $id, ?Model\GenerationsTextureIdDeleteBody $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\DeleteTextureGenerationById($id, $requestBody), $fetch);
    }

    /**
     * This endpoint gets the specific texture generation.
     *
     * @param string $id              _"id" is required (enter it either in parameters or request body)_
     * @param array  $queryParameters {
     *
     * @var int $offset
     * @var int $limit
     *          }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\GenerationsTextureIdGetResponse200|\Psr\Http\Message\ResponseInterface|null
     */
    public function getTextureGenerationById(string $id, ?Model\GenerationsTextureIdGetBody $requestBody = null, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\GetTextureGenerationById($id, $requestBody, $queryParameters), $fetch);
    }

    /**
     * This endpoint returns presigned details to upload a 3D model to S3.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\Models3dUploadPostResponse200|\Psr\Http\Message\ResponseInterface|null
     */
    public function uploadModelAsset(?Model\Models3dUploadPostBody $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\UploadModelAsset($requestBody), $fetch);
    }

    /**
     * This endpoint returns all 3D models by a specific user.
     *
     * @param array $queryParameters {
     *
     * @var int $offset
     * @var int $limit
     *          }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\Models3dUserUserIdGetResponse200|\Psr\Http\Message\ResponseInterface|null
     */
    public function get3DModelsByUserId(string $userId, ?Model\Models3dUserUserIdGetBody $requestBody = null, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\Get3DModelsByUserId($userId, $requestBody, $queryParameters), $fetch);
    }

    /**
     * This endpoint deletes the specific 3D Model.
     *
     * @param string $id    _"id" is required (enter it either in parameters or request body)_
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\Models3dIdDeleteResponse200|\Psr\Http\Message\ResponseInterface|null
     */
    public function delete3DModelById(string $id, ?Model\Models3dIdDeleteBody $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\Delete3DModelById($id, $requestBody), $fetch);
    }

    /**
     * This endpoint gets the specific 3D model.
     *
     * @param string $id              _"id" is required (enter it either in parameters or request body)_
     * @param array  $queryParameters {
     *
     * @var int $offset
     * @var int $limit
     *          }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\Models3dIdGetResponse200|\Psr\Http\Message\ResponseInterface|null
     */
    public function get3DModelById(string $id, ?Model\Models3dIdGetBody $requestBody = null, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\Get3DModelById($id, $requestBody, $queryParameters), $fetch);
    }

    /**
     * This endpoint returns presigned details to upload an init image to S3.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\InitImagePostResponse200|\Psr\Http\Message\ResponseInterface|null
     */
    public function uploadInitImage(Model\InitImagePostBody $requestBody, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\UploadInitImage($requestBody), $fetch);
    }

    /**
     * This endpoint deletes an init image.
     *
     * @param string $id    _"id" is required_
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\InitImageIdDeleteResponse200|\Psr\Http\Message\ResponseInterface|null
     */
    public function deleteInitImageById(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\DeleteInitImageById($id), $fetch);
    }

    /**
     * This endpoint will return a single init image.
     *
     * @param string $id    _"id" is required_
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\InitImageIdGetResponse200|\Psr\Http\Message\ResponseInterface|null
     */
    public function getInitImageById(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\GetInitImageById($id), $fetch);
    }

    /**
     * This endpoint returns presigned details to upload an init image and a mask image to S3.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\CanvasInitImagePostResponse200|\Psr\Http\Message\ResponseInterface|null
     */
    public function uploadCanvasInitImage(Model\CanvasInitImagePostBody $requestBody, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\UploadCanvasInitImage($requestBody), $fetch);
    }

    /**
     * This endpoint will create an unzoom variation for the provided image ID.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\VariationsUnzoomPostResponse200|\Psr\Http\Message\ResponseInterface|null
     */
    public function createVariationUnzoom(?Model\VariationsUnzoomPostBody $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\CreateVariationUnzoom($requestBody), $fetch);
    }

    /**
     * This endpoint will create an upscale for the provided image ID.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\VariationsUpscalePostResponse200|\Psr\Http\Message\ResponseInterface|null
     */
    public function createVariationUpscale(?Model\VariationsUpscalePostBody $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\CreateVariationUpscale($requestBody), $fetch);
    }

    /**
     * This endpoint will create a no background variation of the provided image ID.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\VariationsNobgPostResponse200|\Psr\Http\Message\ResponseInterface|null
     */
    public function createVariationNoBG(Model\VariationsNobgPostBody $requestBody, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\CreateVariationNoBG($requestBody), $fetch);
    }

    /**
     * This endpoint will create a high resolution image using Universal Upscaler.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\VariationsUniversalUpscalerPostResponse200|\Psr\Http\Message\ResponseInterface|null
     */
    public function createUniversalUpscalerJob(Model\VariationsUniversalUpscalerPostBody $requestBody, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\CreateUniversalUpscalerJob($requestBody), $fetch);
    }

    /**
     * This endpoint will get the variation by ID.
     *
     * @param string $id    "id" is required
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\VariationsIdGetResponse200|\Psr\Http\Message\ResponseInterface|null
     */
    public function getVariationById(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\GetVariationById($id), $fetch);
    }

    /**
     * This endpoint creates a new dataset.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\DatasetsPostResponse200|\Psr\Http\Message\ResponseInterface|null
     */
    public function createDataset(Model\DatasetsPostBody $requestBody, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\CreateDataset($requestBody), $fetch);
    }

    /**
     * This endpoint deletes the specific dataset.
     *
     * @param string $id    the ID of the dataset to delete
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\DatasetsIdDeleteResponse200|\Psr\Http\Message\ResponseInterface|null
     */
    public function deleteDatasetById(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\DeleteDatasetById($id), $fetch);
    }

    /**
     * This endpoint gets the specific dataset.
     *
     * @param string $id    the ID of the dataset to return
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\DatasetsIdGetResponse200|\Psr\Http\Message\ResponseInterface|null
     */
    public function getDatasetById(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\GetDatasetById($id), $fetch);
    }

    /**
     * This endpoint returns presigned details to upload a dataset image to S3.
     *
     * @param string $datasetId _"datasetId" is required
     * @param string $fetch     Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\DatasetsDatasetIdUploadPostResponse200|\Psr\Http\Message\ResponseInterface|null
     */
    public function uploadDatasetImage(string $datasetId, Model\DatasetsDatasetIdUploadPostBody $requestBody, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\UploadDatasetImage($datasetId, $requestBody), $fetch);
    }

    /**
     * This endpoint will upload a previously generated image to the dataset.
     *
     * @param string $datasetId the ID of the dataset to upload the image to
     * @param string $fetch     Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\DatasetsDatasetIdUploadGenPostResponse200|\Psr\Http\Message\ResponseInterface|null
     */
    public function uploadDatasetImageFromGen(string $datasetId, Model\DatasetsDatasetIdUploadGenPostBody $requestBody, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\UploadDatasetImageFromGen($datasetId, $requestBody), $fetch);
    }

    /**
     * This endpoint will train a new custom model.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\ModelsPostResponse200|\Psr\Http\Message\ResponseInterface|null
     */
    public function createModel(Model\ModelsPostBody $requestBody, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\CreateModel($requestBody), $fetch);
    }

    /**
     * This endpoint will delete a specific custom model.
     *
     * @param string $id    the ID of the model to delete
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\ModelsIdDeleteResponse200|\Psr\Http\Message\ResponseInterface|null
     */
    public function deleteModelById(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\DeleteModelById($id), $fetch);
    }

    /**
     * This endpoint gets the specific custom model.
     *
     * @param string $id    the ID of the custom model to return
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\ModelsIdGetResponse200|\Psr\Http\Message\ResponseInterface|null
     */
    public function getModelById(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\GetModelById($id), $fetch);
    }

    /**
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\PlatformModelsGetResponse200|\Psr\Http\Message\ResponseInterface|null
     */
    public function listPlatformModels(string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\ListPlatformModels(), $fetch);
    }

    /**
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\ElementsGetResponse200|\Psr\Http\Message\ResponseInterface|null
     */
    public function listElements(string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\ListElements(), $fetch);
    }

    /**
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\PromptRandomPostResponse200|\Psr\Http\Message\ResponseInterface|null
     */
    public function promptRandom(string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\PromptRandom(), $fetch);
    }

    /**
     * This endpoint returns a improved prompt.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\PromptImprovePostResponse200|\Psr\Http\Message\ResponseInterface|null
     */
    public function promptImprove(Model\PromptImprovePostBody $requestBody, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\PromptImprove($requestBody), $fetch);
    }

    /**
     * This endpoint returns the cost used for generating images using a particular service type.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\PricingCalculatorPostResponse200|\Psr\Http\Message\ResponseInterface|null
     */
    public function pricingCalculator(?Model\PricingCalculatorPostBody $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\PricingCalculator($requestBody), $fetch);
    }

    public static function create($httpClient = null, array $additionalPlugins = [], array $additionalNormalizers = [])
    {
        if (null === $httpClient) {
            $httpClient = \Http\Discovery\Psr18ClientDiscovery::find();
            $plugins = [];
            $uri = \Http\Discovery\Psr17FactoryDiscovery::findUriFactory()->createUri('https://cloud.leonardo.ai/api/rest/v1');
            $plugins[] = new \Http\Client\Common\Plugin\AddHostPlugin($uri);
            $plugins[] = new \Http\Client\Common\Plugin\AddPathPlugin($uri);
            if (count($additionalPlugins) > 0) {
                $plugins = array_merge($plugins, $additionalPlugins);
            }
            $httpClient = new \Http\Client\Common\PluginClient($httpClient, $plugins);
        }
        $requestFactory = \Http\Discovery\Psr17FactoryDiscovery::findRequestFactory();
        $streamFactory = \Http\Discovery\Psr17FactoryDiscovery::findStreamFactory();
        $normalizers = [new \Symfony\Component\Serializer\Normalizer\ArrayDenormalizer(), new Normalizer\JaneObjectNormalizer()];
        if (count($additionalNormalizers) > 0) {
            $normalizers = array_merge($normalizers, $additionalNormalizers);
        }
        $serializer = new \Symfony\Component\Serializer\Serializer($normalizers, [new \Symfony\Component\Serializer\Encoder\JsonEncoder(new \Symfony\Component\Serializer\Encoder\JsonEncode(), new \Symfony\Component\Serializer\Encoder\JsonDecode(['json_decode_associative' => true]))]);

        return new static($httpClient, $requestFactory, $serializer, $streamFactory);
    }
}
